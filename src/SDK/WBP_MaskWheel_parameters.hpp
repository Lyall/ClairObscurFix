#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MaskWheel

#include "Basic.hpp"

#include "E_Transform_Masks_Mechanic_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_MaskWheel.WBP_MaskWheel_C.CreateMaskWheel
// 0x0038 (0x0038 - 0x0000)
struct WBP_MaskWheel_C_CreateMaskWheel final
{
public:
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MaskWidget_C*                      K2Node_Select_Default;                             // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_Transform_Masks_Mechanic                    CallFunc_Array_Get_Item;                           // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_CreateMaskWheel) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_CreateMaskWheel");
static_assert(sizeof(WBP_MaskWheel_C_CreateMaskWheel) == 0x000038, "Wrong size on WBP_MaskWheel_C_CreateMaskWheel");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_Array_Length_ReturnValue) == 0x000000, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000004, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_Array_Length_ReturnValue_1) == 0x000008, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, Temp_int_Loop_Counter_Variable) == 0x00000C, "Member 'WBP_MaskWheel_C_CreateMaskWheel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_Less_IntInt_ReturnValue) == 0x000010, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_Add_IntInt_ReturnValue) == 0x000014, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, Temp_int_Variable) == 0x000018, "Member 'WBP_MaskWheel_C_CreateMaskWheel::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, Temp_int_Array_Index_Variable) == 0x00001C, "Member 'WBP_MaskWheel_C_CreateMaskWheel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x000020, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, K2Node_Select_Default) == 0x000028, "Member 'WBP_MaskWheel_C_CreateMaskWheel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_CreateMaskWheel, CallFunc_Array_Get_Item) == 0x000030, "Member 'WBP_MaskWheel_C_CreateMaskWheel::CallFunc_Array_Get_Item' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.ExecuteUbergraph_WBP_MaskWheel
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0024(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0034(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x0044(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0054(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_Transform_Masks_Mechanic                    Temp_byte_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_CurrentMeter;                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleForMeter_Angle;                   // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UWBP_MaskWidget_C*>              K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWBP_MaskWidget_C*                      CallFunc_Array_Get_Item;                           // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00A4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A5[0x3];                                       // 0x00A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraUIComponent*                    CallFunc_GetNiagaraComponent_ReturnValue;          // 0x00A8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_Transform_Masks_Mechanic                    CallFunc_Array_Get_Item_1;                         // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel");
static_assert(sizeof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel) == 0x0000C8, "Wrong size on WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, EntryPoint) == 0x000000, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable) == 0x000004, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable_1) == 0x000014, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable_2) == 0x000024, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable_3) == 0x000034, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable_4) == 0x000044, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_struct_Variable_5) == 0x000054, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_int_Array_Index_Variable) == 0x000064, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_int_Loop_Counter_Variable) == 0x000068, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_Add_IntInt_ReturnValue) == 0x00006C, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, Temp_byte_Variable) == 0x000070, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, K2Node_Event_IsDesignTime) == 0x000071, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, K2Node_CustomEvent_CurrentMeter) == 0x000074, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::K2Node_CustomEvent_CurrentMeter' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_GetAngleForMeter_Angle) == 0x000078, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_GetAngleForMeter_Angle' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, K2Node_MakeArray_Array) == 0x000080, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000090, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_Array_Get_Item) == 0x000098, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_Array_Length_ReturnValue) == 0x0000A0, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_Less_IntInt_ReturnValue) == 0x0000A4, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_GetNiagaraComponent_ReturnValue) == 0x0000A8, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_GetNiagaraComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_Array_Get_Item_1) == 0x0000B0, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, K2Node_Select_Default) == 0x0000B4, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x0000C4, "Member 'WBP_MaskWheel_C_ExecuteUbergraph_WBP_MaskWheel::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.GetAngleForMeter
// 0x0048 (0x0048 - 0x0000)
struct WBP_MaskWheel_C_GetAngleForMeter final
{
public:
	int32                                         InMeter;                                           // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Angle;                                             // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_GetAngleForMeter) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_GetAngleForMeter");
static_assert(sizeof(WBP_MaskWheel_C_GetAngleForMeter) == 0x000048, "Wrong size on WBP_MaskWheel_C_GetAngleForMeter");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, InMeter) == 0x000000, "Member 'WBP_MaskWheel_C_GetAngleForMeter::InMeter' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, Angle) == 0x000008, "Member 'WBP_MaskWheel_C_GetAngleForMeter::Angle' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000010, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_MakeLiteralDouble_ReturnValue) == 0x000018, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000028, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000030, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000038, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleForMeter, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000040, "Member 'WBP_MaskWheel_C_GetAngleForMeter::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.GetAngleFromProgress
// 0x0088 (0x0088 - 0x0000)
struct WBP_MaskWheel_C_GetAngleFromProgress final
{
public:
	double                                        Alpha;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MakeLiteralDouble_ReturnValue_1;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_DoubleDouble_ReturnValue;            // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_NormalizeToRange_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_NormalizeToRange_ReturnValue_1;           // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_1;                       // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue;                  // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue_2;                       // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SelectFloat_ReturnValue_1;                // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_GetAngleFromProgress) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_GetAngleFromProgress");
static_assert(sizeof(WBP_MaskWheel_C_GetAngleFromProgress) == 0x000088, "Wrong size on WBP_MaskWheel_C_GetAngleFromProgress");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, Alpha) == 0x000000, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::Alpha' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, ReturnValue) == 0x000008, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_MakeLiteralDouble_ReturnValue) == 0x000010, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_MakeLiteralDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_MakeLiteralDouble_ReturnValue_1) == 0x000018, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_MakeLiteralDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000020, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000028, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000030, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000038, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000040, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Less_DoubleDouble_ReturnValue) == 0x000048, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Less_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_NormalizeToRange_ReturnValue) == 0x000050, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_NormalizeToRange_ReturnValue_1) == 0x000058, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_NormalizeToRange_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Lerp_ReturnValue) == 0x000060, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Lerp_ReturnValue_1) == 0x000068, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Lerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_SelectFloat_ReturnValue) == 0x000070, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_SelectFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_Lerp_ReturnValue_2) == 0x000078, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_Lerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_GetAngleFromProgress, CallFunc_SelectFloat_ReturnValue_1) == 0x000080, "Member 'WBP_MaskWheel_C_GetAngleFromProgress::CallFunc_SelectFloat_ReturnValue_1' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.LoadMasksWheel
// 0x0010 (0x0010 - 0x0000)
struct WBP_MaskWheel_C_LoadMasksWheel final
{
public:
	TArray<E_Transform_Masks_Mechanic>            MaskList;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_MaskWheel_C_LoadMasksWheel) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_LoadMasksWheel");
static_assert(sizeof(WBP_MaskWheel_C_LoadMasksWheel) == 0x000010, "Wrong size on WBP_MaskWheel_C_LoadMasksWheel");
static_assert(offsetof(WBP_MaskWheel_C_LoadMasksWheel, MaskList) == 0x000000, "Member 'WBP_MaskWheel_C_LoadMasksWheel::MaskList' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_MaskWheel_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_MaskWheel_C_PreConstruct");
static_assert(sizeof(WBP_MaskWheel_C_PreConstruct) == 0x000001, "Wrong size on WBP_MaskWheel_C_PreConstruct");
static_assert(offsetof(WBP_MaskWheel_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_MaskWheel_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.RefreshCurrentMeter
// 0x0020 (0x0020 - 0x0000)
struct WBP_MaskWheel_C_RefreshCurrentMeter final
{
public:
	double                                        Temp_wildcard_Variable;                            // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleForMeter_Angle;                   // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_DoubleDouble_ReturnValue;        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_RefreshCurrentMeter) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_RefreshCurrentMeter");
static_assert(sizeof(WBP_MaskWheel_C_RefreshCurrentMeter) == 0x000020, "Wrong size on WBP_MaskWheel_C_RefreshCurrentMeter");
static_assert(offsetof(WBP_MaskWheel_C_RefreshCurrentMeter, Temp_wildcard_Variable) == 0x000000, "Member 'WBP_MaskWheel_C_RefreshCurrentMeter::Temp_wildcard_Variable' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_RefreshCurrentMeter, CallFunc_GetAngleForMeter_Angle) == 0x000008, "Member 'WBP_MaskWheel_C_RefreshCurrentMeter::CallFunc_GetAngleForMeter_Angle' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_RefreshCurrentMeter, CallFunc_PlayAnimation_ReturnValue) == 0x000010, "Member 'WBP_MaskWheel_C_RefreshCurrentMeter::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_RefreshCurrentMeter, CallFunc_NotEqual_DoubleDouble_ReturnValue) == 0x000018, "Member 'WBP_MaskWheel_C_RefreshCurrentMeter::CallFunc_NotEqual_DoubleDouble_ReturnValue' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.SetArrowAnimationProgress
// 0x0018 (0x0018 - 0x0000)
struct WBP_MaskWheel_C_SetArrowAnimationProgress final
{
public:
	double                                        NewValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetAngleFromProgress_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_SetArrowAnimationProgress) == 0x000008, "Wrong alignment on WBP_MaskWheel_C_SetArrowAnimationProgress");
static_assert(sizeof(WBP_MaskWheel_C_SetArrowAnimationProgress) == 0x000018, "Wrong size on WBP_MaskWheel_C_SetArrowAnimationProgress");
static_assert(offsetof(WBP_MaskWheel_C_SetArrowAnimationProgress, NewValue) == 0x000000, "Member 'WBP_MaskWheel_C_SetArrowAnimationProgress::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_SetArrowAnimationProgress, CallFunc_GetAngleFromProgress_ReturnValue) == 0x000008, "Member 'WBP_MaskWheel_C_SetArrowAnimationProgress::CallFunc_GetAngleFromProgress_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_MaskWheel_C_SetArrowAnimationProgress, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000010, "Member 'WBP_MaskWheel_C_SetArrowAnimationProgress::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_MaskWheel.WBP_MaskWheel_C.SetCurrentMeter
// 0x0004 (0x0004 - 0x0000)
struct WBP_MaskWheel_C_SetCurrentMeter final
{
public:
	int32                                         CurrentMeter_0;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_MaskWheel_C_SetCurrentMeter) == 0x000004, "Wrong alignment on WBP_MaskWheel_C_SetCurrentMeter");
static_assert(sizeof(WBP_MaskWheel_C_SetCurrentMeter) == 0x000004, "Wrong size on WBP_MaskWheel_C_SetCurrentMeter");
static_assert(offsetof(WBP_MaskWheel_C_SetCurrentMeter, CurrentMeter_0) == 0x000000, "Member 'WBP_MaskWheel_C_SetCurrentMeter::CurrentMeter_0' has a wrong offset!");

}

