#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_ProceduralMesh

#include "Basic.hpp"

#include "BS_MeshDefinition_structs.hpp"
#include "ProceduralMeshComponent_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineTCoeff
// 0x00B0 (0x00B0 - 0x0000)
struct BPL_ProceduralMesh_C_SplineTCoeff final
{
public:
	double                                        T1;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        WP1;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WT1;                                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WP2;                                               // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WT2;                                               // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T3;                                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T2;                                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_7;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_8;      // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_SplineTCoeff) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_SplineTCoeff");
static_assert(sizeof(BPL_ProceduralMesh_C_SplineTCoeff) == 0x0000B0, "Wrong size on BPL_ProceduralMesh_C_SplineTCoeff");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, T1) == 0x000000, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::T1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, __WorldContext) == 0x000008, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, WP1) == 0x000010, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::WP1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, WT1) == 0x000018, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::WT1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, WP2) == 0x000020, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::WP2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, WT2) == 0x000028, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::WT2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, T3) == 0x000030, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::T3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, T2) == 0x000038, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::T2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000058, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000060, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000068, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000070, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000078, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000080, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_7) == 0x000090, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000098, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_8) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineTCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_SplineTCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineT
// 0x0150 (0x0150 - 0x0000)
struct BPL_ProceduralMesh_C_SplineT final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AT;                                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                B;                                                 // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BT;                                                // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R;                                                 // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineTCoeff_WP1;                         // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineTCoeff_WT1;                         // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineTCoeff_WP2;                         // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineTCoeff_WT2;                         // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_SplineT) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_SplineT");
static_assert(sizeof(BPL_ProceduralMesh_C_SplineT) == 0x000150, "Wrong size on BPL_ProceduralMesh_C_SplineT");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, A) == 0x000000, "Member 'BPL_ProceduralMesh_C_SplineT::A' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, AT) == 0x000018, "Member 'BPL_ProceduralMesh_C_SplineT::AT' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, B) == 0x000030, "Member 'BPL_ProceduralMesh_C_SplineT::B' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, BT) == 0x000048, "Member 'BPL_ProceduralMesh_C_SplineT::BT' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, T) == 0x000060, "Member 'BPL_ProceduralMesh_C_SplineT::T' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, __WorldContext) == 0x000068, "Member 'BPL_ProceduralMesh_C_SplineT::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, R) == 0x000070, "Member 'BPL_ProceduralMesh_C_SplineT::R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_SplineTCoeff_WP1) == 0x000088, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_SplineTCoeff_WP1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_SplineTCoeff_WT1) == 0x000090, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_SplineTCoeff_WT1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_SplineTCoeff_WP2) == 0x000098, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_SplineTCoeff_WP2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_SplineTCoeff_WT2) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_SplineTCoeff_WT2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0000F0, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineT, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000138, "Member 'BPL_ProceduralMesh_C_SplineT::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineCoeff
// 0x00A8 (0x00A8 - 0x0000)
struct BPL_ProceduralMesh_C_SplineCoeff final
{
public:
	double                                        T;                                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        WP1;                                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WT1;                                               // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WP2;                                               // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WT2;                                               // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T3;                                                // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T2;                                                // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_1;      // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_2;      // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_3;      // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_4;      // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_5;      // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_1;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue_6;      // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_2;      // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue_2;           // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_SplineCoeff) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_SplineCoeff");
static_assert(sizeof(BPL_ProceduralMesh_C_SplineCoeff) == 0x0000A8, "Wrong size on BPL_ProceduralMesh_C_SplineCoeff");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, T) == 0x000000, "Member 'BPL_ProceduralMesh_C_SplineCoeff::T' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, __WorldContext) == 0x000008, "Member 'BPL_ProceduralMesh_C_SplineCoeff::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, WP1) == 0x000010, "Member 'BPL_ProceduralMesh_C_SplineCoeff::WP1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, WT1) == 0x000018, "Member 'BPL_ProceduralMesh_C_SplineCoeff::WT1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, WP2) == 0x000020, "Member 'BPL_ProceduralMesh_C_SplineCoeff::WP2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, WT2) == 0x000028, "Member 'BPL_ProceduralMesh_C_SplineCoeff::WT2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, T3) == 0x000030, "Member 'BPL_ProceduralMesh_C_SplineCoeff::T3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, T2) == 0x000038, "Member 'BPL_ProceduralMesh_C_SplineCoeff::T2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000040, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_1) == 0x000048, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_2) == 0x000050, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_3) == 0x000058, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000060, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000068, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_4) == 0x000070, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000078, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_5) == 0x000080, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Add_DoubleDouble_ReturnValue_1) == 0x000088, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Add_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Multiply_DoubleDouble_ReturnValue_6) == 0x000090, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Multiply_DoubleDouble_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Subtract_DoubleDouble_ReturnValue_2) == 0x000098, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Subtract_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_SplineCoeff, CallFunc_Add_DoubleDouble_ReturnValue_2) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_SplineCoeff::CallFunc_Add_DoubleDouble_ReturnValue_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Spline
// 0x0150 (0x0150 - 0x0000)
struct BPL_ProceduralMesh_C_Spline final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                AT;                                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                B;                                                 // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                BT;                                                // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                R;                                                 // 0x0070(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineCoeff_WP1;                          // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineCoeff_WT1;                          // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineCoeff_WP2;                          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SplineCoeff_WT2;                          // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_1;       // 0x00C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_2;       // 0x00D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue_3;       // 0x00F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0108(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_1;           // 0x0120(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue_2;           // 0x0138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_Spline) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_Spline");
static_assert(sizeof(BPL_ProceduralMesh_C_Spline) == 0x000150, "Wrong size on BPL_ProceduralMesh_C_Spline");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, A) == 0x000000, "Member 'BPL_ProceduralMesh_C_Spline::A' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, AT) == 0x000018, "Member 'BPL_ProceduralMesh_C_Spline::AT' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, B) == 0x000030, "Member 'BPL_ProceduralMesh_C_Spline::B' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, BT) == 0x000048, "Member 'BPL_ProceduralMesh_C_Spline::BT' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, T) == 0x000060, "Member 'BPL_ProceduralMesh_C_Spline::T' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, __WorldContext) == 0x000068, "Member 'BPL_ProceduralMesh_C_Spline::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, R) == 0x000070, "Member 'BPL_ProceduralMesh_C_Spline::R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_SplineCoeff_WP1) == 0x000088, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_SplineCoeff_WP1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_SplineCoeff_WT1) == 0x000090, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_SplineCoeff_WT1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_SplineCoeff_WP2) == 0x000098, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_SplineCoeff_WP2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_SplineCoeff_WT2) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_SplineCoeff_WT2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Multiply_VectorFloat_ReturnValue_1) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Multiply_VectorFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Multiply_VectorFloat_ReturnValue_2) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Multiply_VectorFloat_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Multiply_VectorFloat_ReturnValue_3) == 0x0000F0, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Multiply_VectorFloat_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Add_VectorVector_ReturnValue) == 0x000108, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Add_VectorVector_ReturnValue_1) == 0x000120, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Add_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Spline, CallFunc_Add_VectorVector_ReturnValue_2) == 0x000138, "Member 'BPL_ProceduralMesh_C_Spline::CallFunc_Add_VectorVector_ReturnValue_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.QuadIndices
// 0x0068 (0x0068 - 0x0000)
struct BPL_ProceduralMesh_C_QuadIndices final
{
public:
	int32                                         I0;                                                // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I1;                                                // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I2;                                                // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         I3;                                                // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Swap;                                              // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 Array;                                             // 0x0020(0x0010)(Parm, OutParm)
	bool                                          Temp_bool_Variable;                                // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 K2Node_MakeArray_Array;                            // 0x0038(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_1;                          // 0x0048(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_Select_Default;                             // 0x0058(0x0010)(ReferenceParm)
};
static_assert(alignof(BPL_ProceduralMesh_C_QuadIndices) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_QuadIndices");
static_assert(sizeof(BPL_ProceduralMesh_C_QuadIndices) == 0x000068, "Wrong size on BPL_ProceduralMesh_C_QuadIndices");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, I0) == 0x000000, "Member 'BPL_ProceduralMesh_C_QuadIndices::I0' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, I1) == 0x000004, "Member 'BPL_ProceduralMesh_C_QuadIndices::I1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, I2) == 0x000008, "Member 'BPL_ProceduralMesh_C_QuadIndices::I2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, I3) == 0x00000C, "Member 'BPL_ProceduralMesh_C_QuadIndices::I3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, Swap) == 0x000010, "Member 'BPL_ProceduralMesh_C_QuadIndices::Swap' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, __WorldContext) == 0x000018, "Member 'BPL_ProceduralMesh_C_QuadIndices::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, Array) == 0x000020, "Member 'BPL_ProceduralMesh_C_QuadIndices::Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, Temp_bool_Variable) == 0x000030, "Member 'BPL_ProceduralMesh_C_QuadIndices::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, K2Node_MakeArray_Array) == 0x000038, "Member 'BPL_ProceduralMesh_C_QuadIndices::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, K2Node_MakeArray_Array_1) == 0x000048, "Member 'BPL_ProceduralMesh_C_QuadIndices::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_QuadIndices, K2Node_Select_Default) == 0x000058, "Member 'BPL_ProceduralMesh_C_QuadIndices::K2Node_Select_Default' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.PackIntToColor
// 0x0098 (0x0098 - 0x0000)
struct BPL_ProceduralMesh_C_PackIntToColor final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        R;                                                 // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        G;                                                 // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        B;                                                 // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        A;                                                 // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_2;              // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_2;             // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_1;        // 0x0070(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_2;        // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_3;             // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue_3;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_PackIntToColor) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_PackIntToColor");
static_assert(sizeof(BPL_ProceduralMesh_C_PackIntToColor) == 0x000098, "Wrong size on BPL_ProceduralMesh_C_PackIntToColor");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, Value) == 0x000000, "Member 'BPL_ProceduralMesh_C_PackIntToColor::Value' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, __WorldContext) == 0x000008, "Member 'BPL_ProceduralMesh_C_PackIntToColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, R) == 0x000010, "Member 'BPL_ProceduralMesh_C_PackIntToColor::R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, G) == 0x000018, "Member 'BPL_ProceduralMesh_C_PackIntToColor::G' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, B) == 0x000020, "Member 'BPL_ProceduralMesh_C_PackIntToColor::B' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, A) == 0x000028, "Member 'BPL_ProceduralMesh_C_PackIntToColor::A' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Percent_IntInt_ReturnValue) == 0x000030, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_IntInt_ReturnValue) == 0x000034, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000038, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000040, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000048, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_IntInt_ReturnValue_2) == 0x000050, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Percent_IntInt_ReturnValue_1) == 0x000054, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Percent_IntInt_ReturnValue_2) == 0x000058, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Percent_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000060, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000068, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_DoubleDouble_ReturnValue_1) == 0x000070, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_DoubleDouble_ReturnValue_2) == 0x000078, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_DoubleDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Percent_IntInt_ReturnValue_3) == 0x000080, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Percent_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000088, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_PackIntToColor, CallFunc_Divide_DoubleDouble_ReturnValue_3) == 0x000090, "Member 'BPL_ProceduralMesh_C_PackIntToColor::CallFunc_Divide_DoubleDouble_ReturnValue_3' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Pack4Ints
// 0x0048 (0x0048 - 0x0000)
struct BPL_ProceduralMesh_C_Pack4Ints final
{
public:
	int32                                         Value1;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value2;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value3;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value4;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Bits;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_3;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue;                    // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_2;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue_1;                  // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue_2;                  // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_Pack4Ints) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_Pack4Ints");
static_assert(sizeof(BPL_ProceduralMesh_C_Pack4Ints) == 0x000048, "Wrong size on BPL_ProceduralMesh_C_Pack4Ints");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, Value1) == 0x000000, "Member 'BPL_ProceduralMesh_C_Pack4Ints::Value1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, Value2) == 0x000004, "Member 'BPL_ProceduralMesh_C_Pack4Ints::Value2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, Value3) == 0x000008, "Member 'BPL_ProceduralMesh_C_Pack4Ints::Value3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, Value4) == 0x00000C, "Member 'BPL_ProceduralMesh_C_Pack4Ints::Value4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, __WorldContext) == 0x000010, "Member 'BPL_ProceduralMesh_C_Pack4Ints::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, Bits) == 0x000018, "Member 'BPL_ProceduralMesh_C_Pack4Ints::Bits' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Clamp_ReturnValue_1) == 0x000020, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Clamp_ReturnValue_2) == 0x000024, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Multiply_IntInt_ReturnValue) == 0x000028, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00002C, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Clamp_ReturnValue_3) == 0x000030, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Clamp_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Or_IntInt_ReturnValue) == 0x000034, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Or_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Multiply_IntInt_ReturnValue_2) == 0x000038, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Multiply_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Or_IntInt_ReturnValue_1) == 0x00003C, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Or_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack4Ints, CallFunc_Or_IntInt_ReturnValue_2) == 0x000040, "Member 'BPL_ProceduralMesh_C_Pack4Ints::CallFunc_Or_IntInt_ReturnValue_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Pack3Ints
// 0x0038 (0x0038 - 0x0000)
struct BPL_ProceduralMesh_C_Pack3Ints final
{
public:
	int32                                         Value1;                                            // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value2;                                            // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Value3;                                            // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Bits;                                              // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue;                        // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_1;                      // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Clamp_ReturnValue_2;                      // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue_1;            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Or_IntInt_ReturnValue_1;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_Pack3Ints) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_Pack3Ints");
static_assert(sizeof(BPL_ProceduralMesh_C_Pack3Ints) == 0x000038, "Wrong size on BPL_ProceduralMesh_C_Pack3Ints");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, Value1) == 0x000000, "Member 'BPL_ProceduralMesh_C_Pack3Ints::Value1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, Value2) == 0x000004, "Member 'BPL_ProceduralMesh_C_Pack3Ints::Value2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, Value3) == 0x000008, "Member 'BPL_ProceduralMesh_C_Pack3Ints::Value3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, __WorldContext) == 0x000010, "Member 'BPL_ProceduralMesh_C_Pack3Ints::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, Bits) == 0x000018, "Member 'BPL_ProceduralMesh_C_Pack3Ints::Bits' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Clamp_ReturnValue) == 0x00001C, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Clamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Clamp_ReturnValue_1) == 0x000020, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Clamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Clamp_ReturnValue_2) == 0x000024, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Clamp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Multiply_IntInt_ReturnValue) == 0x000028, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Multiply_IntInt_ReturnValue_1) == 0x00002C, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Multiply_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Or_IntInt_ReturnValue) == 0x000030, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Or_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Pack3Ints, CallFunc_Or_IntInt_ReturnValue_1) == 0x000034, "Member 'BPL_ProceduralMesh_C_Pack3Ints::CallFunc_Or_IntInt_ReturnValue_1' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModUVMapPlane
// 0x0210 (0x0210 - 0x0000)
struct BPL_ProceduralMesh_C_ModUVMapPlane final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x00C8(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TexCoords;                                         // 0x0128(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector_X;                            // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_SetFieldsInStruct_StructOut;                // 0x01B0(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModUVMapPlane) == 0x000010, "Wrong alignment on BPL_ProceduralMesh_C_ModUVMapPlane");
static_assert(sizeof(BPL_ProceduralMesh_C_ModUVMapPlane) == 0x000210, "Wrong size on BPL_ProceduralMesh_C_ModUVMapPlane");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, Transform) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::Transform' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, __WorldContext) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, OutMesh) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, TexCoords) == 0x000128, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::TexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, Temp_int_Array_Index_Variable) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_Array_Length_ReturnValue) == 0x00013C, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_Array_Get_Item) == 0x000140, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_Array_Length_ReturnValue_1) == 0x000158, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, Temp_int_Loop_Counter_Variable) == 0x00015C, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_TransformLocation_ReturnValue) == 0x000160, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_Less_IntInt_ReturnValue) == 0x000178, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_BreakVector_X) == 0x000180, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_BreakVector_Y) == 0x000188, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_BreakVector_Z) == 0x000190, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_MakeVector2D_ReturnValue) == 0x000198, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, CallFunc_Add_IntInt_ReturnValue) == 0x0001A8, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModUVMapPlane, K2Node_SetFieldsInStruct_StructOut) == 0x0001B0, "Member 'BPL_ProceduralMesh_C_ModUVMapPlane::K2Node_SetFieldsInStruct_StructOut' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModTransformUV
// 0x01B0 (0x01B0 - 0x0000)
struct BPL_ProceduralMesh_C_ModTransformUV final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FVector2D                              Scale;                                             // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Move;                                              // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0080(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x0088(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector2D>                      LocalUV;                                           // 0x00E8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        LocalVertices;                                     // 0x00F8(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x0110(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_139[0x3];                                      // 0x0139(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0140(0x0060)(HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x01A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModTransformUV) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_ModTransformUV");
static_assert(sizeof(BPL_ProceduralMesh_C_ModTransformUV) == 0x0001B0, "Wrong size on BPL_ProceduralMesh_C_ModTransformUV");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModTransformUV::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, Scale) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModTransformUV::Scale' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, Move) == 0x000070, "Member 'BPL_ProceduralMesh_C_ModTransformUV::Move' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, __WorldContext) == 0x000080, "Member 'BPL_ProceduralMesh_C_ModTransformUV::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, OutMesh) == 0x000088, "Member 'BPL_ProceduralMesh_C_ModTransformUV::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, LocalUV) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_ModTransformUV::LocalUV' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, LocalVertices) == 0x0000F8, "Member 'BPL_ProceduralMesh_C_ModTransformUV::LocalVertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, Temp_int_Array_Index_Variable) == 0x000108, "Member 'BPL_ProceduralMesh_C_ModTransformUV::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Array_Length_ReturnValue) == 0x00010C, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Array_Get_Item) == 0x000110, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, Temp_int_Loop_Counter_Variable) == 0x000120, "Member 'BPL_ProceduralMesh_C_ModTransformUV::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000128, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Less_IntInt_ReturnValue) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Add_IntInt_ReturnValue) == 0x00013C, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, K2Node_MakeStruct_BS_MeshDefinition) == 0x000140, "Member 'BPL_ProceduralMesh_C_ModTransformUV::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransformUV, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0001A0, "Member 'BPL_ProceduralMesh_C_ModTransformUV::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModTransform
// 0x0250 (0x0250 - 0x0000)
struct BPL_ProceduralMesh_C_ModTransform final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FTransform                             Transform;                                         // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x00C8(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector>                        LocaNormals;                                       // 0x0128(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        LocalVertices;                                     // 0x0138(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item;                           // 0x0150(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_TransformDirection_ReturnValue;           // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x01A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_TransformLocation_ReturnValue;            // 0x01C0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x01DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DD[0x3];                                      // 0x01DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x01E8(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModTransform) == 0x000010, "Wrong alignment on BPL_ProceduralMesh_C_ModTransform");
static_assert(sizeof(BPL_ProceduralMesh_C_ModTransform) == 0x000250, "Wrong size on BPL_ProceduralMesh_C_ModTransform");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModTransform::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, Transform) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModTransform::Transform' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, __WorldContext) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_ModTransform::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, OutMesh) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_ModTransform::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, LocaNormals) == 0x000128, "Member 'BPL_ProceduralMesh_C_ModTransform::LocaNormals' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, LocalVertices) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModTransform::LocalVertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, Temp_int_Array_Index_Variable) == 0x000148, "Member 'BPL_ProceduralMesh_C_ModTransform::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Get_Item) == 0x000150, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Length_ReturnValue) == 0x000168, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_TransformDirection_ReturnValue) == 0x000170, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_TransformDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Length_ReturnValue_1) == 0x000188, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Length_ReturnValue_2) == 0x00018C, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Length_ReturnValue_3) == 0x000190, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, Temp_int_Loop_Counter_Variable) == 0x000194, "Member 'BPL_ProceduralMesh_C_ModTransform::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Add_IntInt_ReturnValue) == 0x00019C, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, Temp_int_Array_Index_Variable_1) == 0x0001A0, "Member 'BPL_ProceduralMesh_C_ModTransform::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Array_Get_Item_1) == 0x0001A8, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_TransformLocation_ReturnValue) == 0x0001C0, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_TransformLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, Temp_int_Loop_Counter_Variable_1) == 0x0001D8, "Member 'BPL_ProceduralMesh_C_ModTransform::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Less_IntInt_ReturnValue_1) == 0x0001DC, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, CallFunc_Add_IntInt_ReturnValue_1) == 0x0001E0, "Member 'BPL_ProceduralMesh_C_ModTransform::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModTransform, K2Node_MakeStruct_BS_MeshDefinition) == 0x0001E8, "Member 'BPL_ProceduralMesh_C_ModTransform::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModQuad
// 0x0258 (0x0258 - 0x0000)
struct BPL_ProceduralMesh_C_ModQuad final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FVector                                P1;                                                // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P2;                                                // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P3;                                                // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                P4;                                                // 0x00A8(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x00C8(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector>                        LocaNormals;                                       // 0x0128(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        LocalVertices;                                     // 0x0138(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x0150(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0178(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MultiplyMultiply_FloatFloat_ReturnValue;  // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue_1;      // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_199[0x3];                                      // 0x0199(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue;                        // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_1;                      // 0x01B8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x01D0(0x0060)(HasGetValueTypeHash)
	struct FVector                                CallFunc_VLerp_ReturnValue_2;                      // 0x0230(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast;                 // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast_1;               // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VLerp_Alpha_ImplicitCast_2;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModQuad) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_ModQuad");
static_assert(sizeof(BPL_ProceduralMesh_C_ModQuad) == 0x000258, "Wrong size on BPL_ProceduralMesh_C_ModQuad");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModQuad::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, P1) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModQuad::P1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, P2) == 0x000078, "Member 'BPL_ProceduralMesh_C_ModQuad::P2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, P3) == 0x000090, "Member 'BPL_ProceduralMesh_C_ModQuad::P3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, P4) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_ModQuad::P4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, __WorldContext) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_ModQuad::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, OutMesh) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_ModQuad::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, LocaNormals) == 0x000128, "Member 'BPL_ProceduralMesh_C_ModQuad::LocaNormals' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, LocalVertices) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModQuad::LocalVertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, Temp_int_Array_Index_Variable) == 0x000148, "Member 'BPL_ProceduralMesh_C_ModQuad::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Array_Length_ReturnValue) == 0x00014C, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Array_Get_Item) == 0x000150, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_BreakVector2D_X) == 0x000160, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_BreakVector2D_Y) == 0x000168, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Array_Length_ReturnValue_1) == 0x000170, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000178, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, Temp_int_Loop_Counter_Variable) == 0x000180, "Member 'BPL_ProceduralMesh_C_ModQuad::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_MultiplyMultiply_FloatFloat_ReturnValue) == 0x000188, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_MultiplyMultiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Subtract_DoubleDouble_ReturnValue_1) == 0x000190, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Subtract_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Less_IntInt_ReturnValue) == 0x000198, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_Add_IntInt_ReturnValue) == 0x00019C, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_ReturnValue) == 0x0001A0, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_ReturnValue_1) == 0x0001B8, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, K2Node_MakeStruct_BS_MeshDefinition) == 0x0001D0, "Member 'BPL_ProceduralMesh_C_ModQuad::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_ReturnValue_2) == 0x000230, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_Alpha_ImplicitCast) == 0x000248, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_Alpha_ImplicitCast_1) == 0x00024C, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_Alpha_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModQuad, CallFunc_VLerp_Alpha_ImplicitCast_2) == 0x000250, "Member 'BPL_ProceduralMesh_C_ModQuad::CallFunc_VLerp_Alpha_ImplicitCast_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModExtrudeLine
// 0x0398 (0x0398 - 0x0000)
struct BPL_ProceduralMesh_C_ModExtrudeLine final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	double                                        Width;                                             // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          GenerateUV;                                        // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Divisons;                                          // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x0078(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Temp;                                              // 0x00D8(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	int32                                         ID;                                                // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        NewNormals;                                        // 0x0140(0x0010)(Edit, BlueprintVisible)
	TArray<struct FLinearColor>                   NewColors;                                         // 0x0150(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector2D>                      NewTexCoords;                                      // 0x0160(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Triangles;                                         // 0x0170(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        NewVertices;                                       // 0x0180(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_4;               // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_5;               // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_LastIndex_ReturnValue;              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x01C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x01D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x01E0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x01F0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0204(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_205[0x3];                                      // 0x0205(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Array_Get_Item_1;                         // 0x0218(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_BreakVector2D_X;                          // 0x0230(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0238(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0248(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<int32>                                 CallFunc_QuadIndices_Array;                        // 0x0260(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0270(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_271[0x3];                                      // 0x0271(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0280(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0281(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_282[0x2];                                      // 0x0282(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_3;                  // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_4;                  // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_3;                // 0x0294(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_295[0x3];                                      // 0x0295(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_4;                // 0x029C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29D[0x3];                                      // 0x029D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x02A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_3;                   // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x02A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_X;                            // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Y;                            // 0x02C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector_Z;                            // 0x02D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_4;                   // 0x02F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x02F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_3;                         // 0x02F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_4;                  // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_5;                  // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_6;                  // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_7;                  // 0x0328(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_32C[0x4];                                      // 0x032C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0330(0x0060)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_8;                  // 0x0390(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_9;                  // 0x0394(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModExtrudeLine) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_ModExtrudeLine");
static_assert(sizeof(BPL_ProceduralMesh_C_ModExtrudeLine) == 0x000398, "Wrong size on BPL_ProceduralMesh_C_ModExtrudeLine");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Width) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Width' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, GenerateUV) == 0x000068, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::GenerateUV' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Divisons) == 0x00006C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Divisons' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, __WorldContext) == 0x000070, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, OutMesh) == 0x000078, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, ID) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::ID' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, NewNormals) == 0x000140, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::NewNormals' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, NewColors) == 0x000150, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::NewColors' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, NewTexCoords) == 0x000160, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::NewTexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Triangles) == 0x000170, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Triangles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, NewVertices) == 0x000180, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::NewVertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Array_Index_Variable) == 0x000190, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue) == 0x000194, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Get_Item) == 0x000198, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue_1) == 0x0001A8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue_2) == 0x0001AC, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue_3) == 0x0001B0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue_4) == 0x0001B4, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001B8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Length_ReturnValue_5) == 0x0001BC, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Length_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_LastIndex_ReturnValue) == 0x0001C0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_LastIndex_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Array_Index_Variable_1) == 0x0001C4, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Conv_IntToDouble_ReturnValue) == 0x0001C8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x0001D0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x0001D8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_MakeVector2D_ReturnValue) == 0x0001E0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_MakeVector2D_ReturnValue_1) == 0x0001F0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Loop_Counter_Variable) == 0x000200, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Less_IntInt_ReturnValue) == 0x000204, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue) == 0x000208, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Array_Index_Variable_2) == 0x00020C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Variable) == 0x000210, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Get_Item_1) == 0x000218, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Multiply_IntInt_ReturnValue) == 0x000228, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_BreakVector2D_X) == 0x000230, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_BreakVector2D_Y) == 0x000238, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_1) == 0x000240, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_MakeVector2D_ReturnValue_2) == 0x000248, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_2) == 0x000258, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_3) == 0x00025C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_QuadIndices_Array) == 0x000260, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_QuadIndices_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000270, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_4) == 0x000274, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Loop_Counter_Variable_1) == 0x000278, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Loop_Counter_Variable_2) == 0x00027C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Less_IntInt_ReturnValue_1) == 0x000280, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Less_IntInt_ReturnValue_2) == 0x000281, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_5) == 0x000284, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_6) == 0x000288, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Loop_Counter_Variable_3) == 0x00028C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Loop_Counter_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Loop_Counter_Variable_4) == 0x000290, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Loop_Counter_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Less_IntInt_ReturnValue_3) == 0x000294, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Less_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_7) == 0x000298, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Less_IntInt_ReturnValue_4) == 0x00029C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Less_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Add_IntInt_ReturnValue_8) == 0x0002A0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Array_Index_Variable_3) == 0x0002A4, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Array_Index_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Get_Item_2) == 0x0002A8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_BreakVector_X) == 0x0002C0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_BreakVector_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_BreakVector_Y) == 0x0002C8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_BreakVector_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_BreakVector_Z) == 0x0002D0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_BreakVector_Z' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_MakeVector_ReturnValue) == 0x0002D8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, Temp_int_Array_Index_Variable_4) == 0x0002F0, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::Temp_int_Array_Index_Variable_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue) == 0x0002F4, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Get_Item_3) == 0x0002F8, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_1) == 0x000310, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_2) == 0x000314, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_3) == 0x000318, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_4) == 0x00031C, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_5) == 0x000320, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_6) == 0x000324, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_7) == 0x000328, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, K2Node_MakeStruct_BS_MeshDefinition) == 0x000330, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_8) == 0x000390, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModExtrudeLine, CallFunc_Array_Add_ReturnValue_9) == 0x000394, "Member 'BPL_ProceduralMesh_C_ModExtrudeLine::CallFunc_Array_Add_ReturnValue_9' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModColor
// 0x0160 (0x0160 - 0x0000)
struct BPL_ProceduralMesh_C_ModColor final
{
public:
	struct FBS_MeshDefinition                     InMesh;                                            // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FLinearColor                           NewColor;                                          // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x0078(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FLinearColor>                   LocalColors;                                       // 0x00D8(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x00F4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_F5[0x3];                                       // 0x00F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0100(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModColor) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_ModColor");
static_assert(sizeof(BPL_ProceduralMesh_C_ModColor) == 0x000160, "Wrong size on BPL_ProceduralMesh_C_ModColor");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, InMesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModColor::InMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, NewColor) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModColor::NewColor' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, __WorldContext) == 0x000070, "Member 'BPL_ProceduralMesh_C_ModColor::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, OutMesh) == 0x000078, "Member 'BPL_ProceduralMesh_C_ModColor::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, LocalColors) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_ModColor::LocalColors' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, Temp_int_Array_Index_Variable) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_ModColor::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, CallFunc_Array_Length_ReturnValue) == 0x0000EC, "Member 'BPL_ProceduralMesh_C_ModColor::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, Temp_int_Loop_Counter_Variable) == 0x0000F0, "Member 'BPL_ProceduralMesh_C_ModColor::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, CallFunc_Less_IntInt_ReturnValue) == 0x0000F4, "Member 'BPL_ProceduralMesh_C_ModColor::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, CallFunc_Add_IntInt_ReturnValue) == 0x0000F8, "Member 'BPL_ProceduralMesh_C_ModColor::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModColor, K2Node_MakeStruct_BS_MeshDefinition) == 0x000100, "Member 'BPL_ProceduralMesh_C_ModColor::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModAppend
// 0x0150 (0x0150 - 0x0000)
struct BPL_ProceduralMesh_C_ModAppend final
{
public:
	struct FBS_MeshDefinition                     InMeshA;                                           // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     InMeshB;                                           // 0x0060(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x00C0(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     OutMesh;                                           // 0x00C8(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Offset;                                            // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_ModAppend) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_ModAppend");
static_assert(sizeof(BPL_ProceduralMesh_C_ModAppend) == 0x000150, "Wrong size on BPL_ProceduralMesh_C_ModAppend");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, InMeshA) == 0x000000, "Member 'BPL_ProceduralMesh_C_ModAppend::InMeshA' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, InMeshB) == 0x000060, "Member 'BPL_ProceduralMesh_C_ModAppend::InMeshB' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, __WorldContext) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_ModAppend::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, OutMesh) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_ModAppend::OutMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, Offset) == 0x000128, "Member 'BPL_ProceduralMesh_C_ModAppend::Offset' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Array_Length_ReturnValue) == 0x00012C, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Array_Length_ReturnValue_1) == 0x000130, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, Temp_int_Array_Index_Variable) == 0x000134, "Member 'BPL_ProceduralMesh_C_ModAppend::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, Temp_int_Loop_Counter_Variable) == 0x000138, "Member 'BPL_ProceduralMesh_C_ModAppend::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Array_Get_Item) == 0x00013C, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Less_IntInt_ReturnValue) == 0x000140, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Add_IntInt_ReturnValue) == 0x000144, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Add_IntInt_ReturnValue_1) == 0x000148, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_ModAppend, CallFunc_Array_Add_ReturnValue) == 0x00014C, "Member 'BPL_ProceduralMesh_C_ModAppend::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.LogStats
// 0x02D0 (0x02D0 - 0x0000)
struct BPL_ProceduralMesh_C_LogStats final
{
public:
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	bool                                          PrintTriangles;                                    // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintLocations;                                    // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PrintColors;                                       // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         TriLength;                                         // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue;             // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x0088(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_ColorToString_ReturnValue;           // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_3;               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_1;           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_2;              // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Array_Get_Item_1;                         // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_2;           // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_VectorToString_ReturnValue;          // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_3;              // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_4;              // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable;                                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_3;           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_4;           // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19C[0x4];                                      // 0x019C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_5;           // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_5;              // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_6;              // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue;                // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D4[0x4];                                      // 0x01D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_7;              // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_8;              // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_9;              // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_10;             // 0x0218(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item_2;                         // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_6;           // 0x0238(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_7;           // 0x0248(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_11;             // 0x0258(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Divide_IntInt_ReturnValue_1;              // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Conv_IntToString_ReturnValue_8;           // 0x0270(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_12;             // 0x0280(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_13;             // 0x0290(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_14;             // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_15;             // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x02C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x02C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C5[0x3];                                      // 0x02C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x02C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_LogStats) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_LogStats");
static_assert(sizeof(BPL_ProceduralMesh_C_LogStats) == 0x0002D0, "Wrong size on BPL_ProceduralMesh_C_LogStats");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Mesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_LogStats::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, PrintTriangles) == 0x000060, "Member 'BPL_ProceduralMesh_C_LogStats::PrintTriangles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, PrintLocations) == 0x000061, "Member 'BPL_ProceduralMesh_C_LogStats::PrintLocations' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, PrintColors) == 0x000062, "Member 'BPL_ProceduralMesh_C_LogStats::PrintColors' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, __WorldContext) == 0x000068, "Member 'BPL_ProceduralMesh_C_LogStats::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, TriLength) == 0x000070, "Member 'BPL_ProceduralMesh_C_LogStats::TriLength' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Temp_int_Array_Index_Variable) == 0x000074, "Member 'BPL_ProceduralMesh_C_LogStats::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue) == 0x000078, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Get_Item) == 0x000088, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue) == 0x000098, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_ColorToString_ReturnValue) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_ColorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Length_ReturnValue) == 0x0000B8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_1) == 0x0000C0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Length_ReturnValue_1) == 0x0000D0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Length_ReturnValue_2) == 0x0000D4, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Length_ReturnValue_3) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Length_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_1) == 0x0000E0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_2) == 0x0000F0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'BPL_ProceduralMesh_C_LogStats::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Less_IntInt_ReturnValue) == 0x000104, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Add_IntInt_ReturnValue) == 0x000108, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Temp_int_Array_Index_Variable_1) == 0x00010C, "Member 'BPL_ProceduralMesh_C_LogStats::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Get_Item_1) == 0x000110, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_2) == 0x000128, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_VectorToString_ReturnValue) == 0x000138, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_VectorToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_3) == 0x000148, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_4) == 0x000158, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Temp_int_Variable) == 0x000168, "Member 'BPL_ProceduralMesh_C_LogStats::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Multiply_IntInt_ReturnValue) == 0x00016C, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Add_IntInt_ReturnValue_1) == 0x000170, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Add_IntInt_ReturnValue_2) == 0x000174, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_3) == 0x000178, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_4) == 0x000188, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Add_IntInt_ReturnValue_3) == 0x000198, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_5) == 0x0001A0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_5) == 0x0001B0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_6) == 0x0001C0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Divide_IntInt_ReturnValue) == 0x0001D0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Divide_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_7) == 0x0001D8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Subtract_IntInt_ReturnValue) == 0x0001E8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_8) == 0x0001F0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000200, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_9) == 0x000208, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_9' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_10) == 0x000218, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_10' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Greater_IntInt_ReturnValue) == 0x000228, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x00022C, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Array_Get_Item_2) == 0x000230, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_6) == 0x000238, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_7) == 0x000248, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_11) == 0x000258, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_11' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Divide_IntInt_ReturnValue_1) == 0x000268, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Divide_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Conv_IntToString_ReturnValue_8) == 0x000270, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Conv_IntToString_ReturnValue_8' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_12) == 0x000280, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_12' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_13) == 0x000290, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_13' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_14) == 0x0002A0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_14' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Concat_StrStr_ReturnValue_15) == 0x0002B0, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Concat_StrStr_ReturnValue_15' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, Temp_int_Loop_Counter_Variable_1) == 0x0002C0, "Member 'BPL_ProceduralMesh_C_LogStats::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Less_IntInt_ReturnValue_1) == 0x0002C4, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_LogStats, CallFunc_Add_IntInt_ReturnValue_4) == 0x0002C8, "Member 'BPL_ProceduralMesh_C_LogStats::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Lerp
// 0x0070 (0x0070 - 0x0000)
struct BPL_ProceduralMesh_C_Lerp final
{
public:
	struct FVector2D                              A;                                                 // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              B;                                                 // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        T;                                                 // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              R;                                                 // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DFloat_ReturnValue;       // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_Lerp) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_Lerp");
static_assert(sizeof(BPL_ProceduralMesh_C_Lerp) == 0x000070, "Wrong size on BPL_ProceduralMesh_C_Lerp");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, A) == 0x000000, "Member 'BPL_ProceduralMesh_C_Lerp::A' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, B) == 0x000010, "Member 'BPL_ProceduralMesh_C_Lerp::B' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, T) == 0x000020, "Member 'BPL_ProceduralMesh_C_Lerp::T' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, __WorldContext) == 0x000028, "Member 'BPL_ProceduralMesh_C_Lerp::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, R) == 0x000030, "Member 'BPL_ProceduralMesh_C_Lerp::R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000040, "Member 'BPL_ProceduralMesh_C_Lerp::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, CallFunc_Multiply_Vector2DFloat_ReturnValue) == 0x000050, "Member 'BPL_ProceduralMesh_C_Lerp::CallFunc_Multiply_Vector2DFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_Lerp, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x000060, "Member 'BPL_ProceduralMesh_C_Lerp::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.DrawDebugMesh
// 0x0098 (0x0098 - 0x0000)
struct BPL_ProceduralMesh_C_DrawDebugMesh final
{
public:
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Get_Item;                           // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0089(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8A[0x2];                                       // 0x008A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_Select_Default;                             // 0x008C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_DrawDebugMesh) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_DrawDebugMesh");
static_assert(sizeof(BPL_ProceduralMesh_C_DrawDebugMesh) == 0x000098, "Wrong size on BPL_ProceduralMesh_C_DrawDebugMesh");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, Mesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, __WorldContext) == 0x000060, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, Temp_int_Array_Index_Variable) == 0x000068, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Array_Length_ReturnValue) == 0x00006C, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Array_Get_Item) == 0x000070, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Percent_IntInt_ReturnValue) == 0x000074, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000078, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Subtract_IntInt_ReturnValue) == 0x00007C, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Add_IntInt_ReturnValue) == 0x000080, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, Temp_int_Loop_Counter_Variable) == 0x000084, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, Temp_bool_Variable) == 0x000088, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Less_IntInt_ReturnValue) == 0x000089, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, K2Node_Select_Default) == 0x00008C, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_DrawDebugMesh, CallFunc_Add_IntInt_ReturnValue_1) == 0x000090, "Member 'BPL_ProceduralMesh_C_DrawDebugMesh::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.CreateMeshSection
// 0x00A8 (0x00A8 - 0x0000)
struct BPL_ProceduralMesh_C_CreateMeshSection final
{
public:
	class UProceduralMeshComponent*               Target;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     MeshDefinition;                                    // 0x0008(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         SectionIndex;                                      // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCreateCollision;                                  // 0x006C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      Temp_struct_Variable;                              // 0x0078(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_1;                            // 0x0088(0x0010)(ConstParm, ReferenceParm)
	TArray<struct FVector2D>                      Temp_struct_Variable_2;                            // 0x0098(0x0010)(ConstParm, ReferenceParm)
};
static_assert(alignof(BPL_ProceduralMesh_C_CreateMeshSection) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_CreateMeshSection");
static_assert(sizeof(BPL_ProceduralMesh_C_CreateMeshSection) == 0x0000A8, "Wrong size on BPL_ProceduralMesh_C_CreateMeshSection");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, Target) == 0x000000, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::Target' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, MeshDefinition) == 0x000008, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, SectionIndex) == 0x000068, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::SectionIndex' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, bCreateCollision) == 0x00006C, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::bCreateCollision' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, __WorldContext) == 0x000070, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, Temp_struct_Variable) == 0x000078, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, Temp_struct_Variable_1) == 0x000088, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_CreateMeshSection, Temp_struct_Variable_2) == 0x000098, "Member 'BPL_ProceduralMesh_C_CreateMeshSection::Temp_struct_Variable_2' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildSplit
// 0x01F0 (0x01F0 - 0x0000)
struct BPL_ProceduralMesh_C_BuildSplit final
{
public:
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         LastIndex;                                         // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     MeshOut;                                           // 0x0070(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TexCoords;                                         // 0x00D0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FLinearColor>                   Colors;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Vertices;                                          // 0x00F0(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10D[0x3];                                      // 0x010D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x0120(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item_1;                         // 0x0130(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0141(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_142[0x2];                                      // 0x0142(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_2;                         // 0x0158(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0180(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_181[0x3];                                      // 0x0181(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0190(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildSplit) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildSplit");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildSplit) == 0x0001F0, "Wrong size on BPL_ProceduralMesh_C_BuildSplit");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Mesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildSplit::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, LastIndex) == 0x000060, "Member 'BPL_ProceduralMesh_C_BuildSplit::LastIndex' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, __WorldContext) == 0x000068, "Member 'BPL_ProceduralMesh_C_BuildSplit::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, MeshOut) == 0x000070, "Member 'BPL_ProceduralMesh_C_BuildSplit::MeshOut' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, TexCoords) == 0x0000D0, "Member 'BPL_ProceduralMesh_C_BuildSplit::TexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Colors) == 0x0000E0, "Member 'BPL_ProceduralMesh_C_BuildSplit::Colors' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Vertices) == 0x0000F0, "Member 'BPL_ProceduralMesh_C_BuildSplit::Vertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Loop_Counter_Variable) == 0x000100, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Add_IntInt_ReturnValue) == 0x000104, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Length_ReturnValue) == 0x000108, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Less_IntInt_ReturnValue) == 0x00010C, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Length_ReturnValue_1) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Length_ReturnValue_2) == 0x000114, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Array_Index_Variable) == 0x000118, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Array_Index_Variable_1) == 0x00011C, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Get_Item) == 0x000120, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Get_Item_1) == 0x000130, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Greater_IntInt_ReturnValue) == 0x000140, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000141, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Loop_Counter_Variable_1) == 0x000144, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Less_IntInt_ReturnValue_1) == 0x000148, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Add_IntInt_ReturnValue_1) == 0x00014C, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Array_Index_Variable_2) == 0x000150, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Get_Item_2) == 0x000158, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Add_ReturnValue) == 0x000170, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000174, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, Temp_int_Loop_Counter_Variable_2) == 0x000178, "Member 'BPL_ProceduralMesh_C_BuildSplit::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Add_ReturnValue_1) == 0x00017C, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Less_IntInt_ReturnValue_2) == 0x000180, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Add_IntInt_ReturnValue_2) == 0x000184, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, CallFunc_Array_Add_ReturnValue_2) == 0x000188, "Member 'BPL_ProceduralMesh_C_BuildSplit::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplit, K2Node_MakeStruct_BS_MeshDefinition) == 0x000190, "Member 'BPL_ProceduralMesh_C_BuildSplit::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildSplineBillboard
// 0x03B0 (0x03B0 - 0x0000)
struct BPL_ProceduralMesh_C_BuildSplineBillboard final
{
public:
	struct FVector                                StartPos;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndPos;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                StartTangent;                                      // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                EndTangent;                                        // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              StartUV;                                           // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              EndUV;                                             // 0x0070(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           StartColor;                                        // 0x0080(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           EndColor;                                          // 0x0090(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Up;                                                // 0x00A0(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Triangles;                                         // 0x00B8(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0118(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0120(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	double                                        Offset;                                            // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Interpolation;                                     // 0x0188(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      LocalTexCoord;                                     // 0x0190(0x0010)(Edit, BlueprintVisible)
	TArray<struct FLinearColor>                   LocalColor;                                        // 0x01A0(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        LocalNormal;                                       // 0x01B0(0x0010)(Edit, BlueprintVisible)
	struct FBS_MeshDefinition                     TempMesh;                                          // 0x01C0(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	TArray<struct FVector>                        LocalVertex;                                       // 0x0220(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item;                           // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0248(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0250(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25D[0x3];                                      // 0x025D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_264[0x4];                                      // 0x0264(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProcMeshTangent>               K2Node_MakeArray_Array;                            // 0x0268(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0278(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_LinearColorLerp_ReturnValue;              // 0x0290(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x02A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x02A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x02B0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x02B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Ease_ReturnValue;                         // 0x02C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x02C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_SplineT_R;                                // 0x02D8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x02F0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Spline_R;                                 // 0x0308(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0320(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0338(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x033C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0340(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0348(0x0060)(HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_3;                  // 0x03A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_LinearColorLerp_Alpha_ImplicitCast;       // 0x03AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildSplineBillboard) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildSplineBillboard");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildSplineBillboard) == 0x0003B0, "Wrong size on BPL_ProceduralMesh_C_BuildSplineBillboard");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, StartPos) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::StartPos' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, EndPos) == 0x000018, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::EndPos' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, StartTangent) == 0x000030, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::StartTangent' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, EndTangent) == 0x000048, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::EndTangent' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, StartUV) == 0x000060, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::StartUV' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, EndUV) == 0x000070, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::EndUV' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, StartColor) == 0x000080, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::StartColor' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, EndColor) == 0x000090, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::EndColor' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Up) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Up' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Triangles) == 0x0000B8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Triangles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, __WorldContext) == 0x000118, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Mesh) == 0x000120, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Offset) == 0x000180, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Offset' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Interpolation) == 0x000188, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Interpolation' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, LocalTexCoord) == 0x000190, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::LocalTexCoord' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, LocalColor) == 0x0001A0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::LocalColor' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, LocalNormal) == 0x0001B0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::LocalNormal' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, TempMesh) == 0x0001C0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::TempMesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, LocalVertex) == 0x000220, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::LocalVertex' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Temp_int_Array_Index_Variable) == 0x000230, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Length_ReturnValue) == 0x000234, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Get_Item) == 0x000238, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_X) == 0x000248, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_Y) == 0x000250, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, Temp_int_Loop_Counter_Variable) == 0x000258, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Less_IntInt_ReturnValue) == 0x00025C, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Add_IntInt_ReturnValue) == 0x000260, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, K2Node_MakeArray_Array) == 0x000268, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000278, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_LinearColorLerp_ReturnValue) == 0x000290, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_LinearColorLerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_X_1) == 0x0002A0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_Y_1) == 0x0002A8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_X_2) == 0x0002B0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_BreakVector2D_Y_2) == 0x0002B8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Ease_ReturnValue) == 0x0002C0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Ease_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_MakeVector2D_ReturnValue) == 0x0002C8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_SplineT_R) == 0x0002D8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_SplineT_R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Normal_ReturnValue) == 0x0002F0, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Spline_R) == 0x000308, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Spline_R' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Add_VectorVector_ReturnValue) == 0x000320, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Add_ReturnValue) == 0x000338, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Add_ReturnValue_1) == 0x00033C, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Add_ReturnValue_2) == 0x000340, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, K2Node_MakeStruct_BS_MeshDefinition) == 0x000348, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_Array_Add_ReturnValue_3) == 0x0003A8, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_Array_Add_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildSplineBillboard, CallFunc_LinearColorLerp_Alpha_ImplicitCast) == 0x0003AC, "Member 'BPL_ProceduralMesh_C_BuildSplineBillboard::CallFunc_LinearColorLerp_Alpha_ImplicitCast' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildRemove
// 0x01F8 (0x01F8 - 0x0000)
struct BPL_ProceduralMesh_C_BuildRemove final
{
public:
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	TArray<bool>                                  RemoeIndex;                                        // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	class UObject*                                __WorldContext;                                    // 0x0070(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     MeshOut;                                           // 0x0078(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TexCoords;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FLinearColor>                   Colors;                                            // 0x00E8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Vertices;                                          // 0x00F8(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0114(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_Array_Get_Item;                           // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Array_Get_Item_1;                         // 0x0138(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_2;                         // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0149(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_3;                         // 0x014A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x014B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x3];                                      // 0x0151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_2;                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Array_Get_Item_4;                         // 0x0160(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Array_Get_Item_5;                         // 0x017C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x017D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17E[0x2];                                      // 0x017E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Loop_Counter_Variable_2;                  // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_2;                // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0198(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildRemove) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildRemove");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildRemove) == 0x0001F8, "Wrong size on BPL_ProceduralMesh_C_BuildRemove");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Mesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildRemove::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, RemoeIndex) == 0x000060, "Member 'BPL_ProceduralMesh_C_BuildRemove::RemoeIndex' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, __WorldContext) == 0x000070, "Member 'BPL_ProceduralMesh_C_BuildRemove::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, MeshOut) == 0x000078, "Member 'BPL_ProceduralMesh_C_BuildRemove::MeshOut' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, TexCoords) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_BuildRemove::TexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Colors) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_BuildRemove::Colors' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Vertices) == 0x0000F8, "Member 'BPL_ProceduralMesh_C_BuildRemove::Vertices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Loop_Counter_Variable) == 0x000108, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Add_IntInt_ReturnValue) == 0x00010C, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Length_ReturnValue) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Less_IntInt_ReturnValue) == 0x000114, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Length_ReturnValue_1) == 0x000118, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Length_ReturnValue_2) == 0x00011C, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Array_Index_Variable) == 0x000120, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Array_Index_Variable_1) == 0x000124, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item) == 0x000128, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item_1) == 0x000138, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item_2) == 0x000148, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Not_PreBool_ReturnValue) == 0x000149, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item_3) == 0x00014A, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Not_PreBool_ReturnValue_1) == 0x00014B, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Loop_Counter_Variable_1) == 0x00014C, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Less_IntInt_ReturnValue_1) == 0x000150, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Add_IntInt_ReturnValue_1) == 0x000154, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Array_Index_Variable_2) == 0x000158, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Array_Index_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item_4) == 0x000160, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Add_ReturnValue) == 0x000178, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Get_Item_5) == 0x00017C, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Get_Item_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Not_PreBool_ReturnValue_2) == 0x00017D, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, Temp_int_Loop_Counter_Variable_2) == 0x000180, "Member 'BPL_ProceduralMesh_C_BuildRemove::Temp_int_Loop_Counter_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Add_ReturnValue_1) == 0x000184, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Less_IntInt_ReturnValue_2) == 0x000188, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Less_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Add_IntInt_ReturnValue_2) == 0x00018C, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, CallFunc_Array_Add_ReturnValue_2) == 0x000190, "Member 'BPL_ProceduralMesh_C_BuildRemove::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildRemove, K2Node_MakeStruct_BS_MeshDefinition) == 0x000198, "Member 'BPL_ProceduralMesh_C_BuildRemove::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildQuad
// 0x01C8 (0x01C8 - 0x0000)
struct BPL_ProceduralMesh_C_BuildQuad final
{
public:
	struct FVector                                v1;                                                // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                v2;                                                // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                V3;                                                // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                V4;                                                // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0068(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FVector2D>                      K2Node_MakeArray_Array;                            // 0x00C8(0x0010)(ReferenceParm)
	TArray<int32>                                 CallFunc_QuadIndices_Array;                        // 0x00D8(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00E8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array_1;                          // 0x0100(0x0010)(ReferenceParm)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue_1;      // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Cross_VectorVector_ReturnValue;           // 0x0128(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Normal_ReturnValue;                       // 0x0140(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        K2Node_MakeArray_Array_2;                          // 0x0158(0x0010)(ReferenceParm)
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0168(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildQuad) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildQuad");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildQuad) == 0x0001C8, "Wrong size on BPL_ProceduralMesh_C_BuildQuad");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, v1) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildQuad::v1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, v2) == 0x000018, "Member 'BPL_ProceduralMesh_C_BuildQuad::v2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, V3) == 0x000030, "Member 'BPL_ProceduralMesh_C_BuildQuad::V3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, V4) == 0x000048, "Member 'BPL_ProceduralMesh_C_BuildQuad::V4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, __WorldContext) == 0x000060, "Member 'BPL_ProceduralMesh_C_BuildQuad::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, Mesh) == 0x000068, "Member 'BPL_ProceduralMesh_C_BuildQuad::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, K2Node_MakeArray_Array) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_BuildQuad::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, CallFunc_QuadIndices_Array) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_BuildQuad::CallFunc_QuadIndices_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_BuildQuad::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, K2Node_MakeArray_Array_1) == 0x000100, "Member 'BPL_ProceduralMesh_C_BuildQuad::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, CallFunc_Subtract_VectorVector_ReturnValue_1) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildQuad::CallFunc_Subtract_VectorVector_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, CallFunc_Cross_VectorVector_ReturnValue) == 0x000128, "Member 'BPL_ProceduralMesh_C_BuildQuad::CallFunc_Cross_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, CallFunc_Normal_ReturnValue) == 0x000140, "Member 'BPL_ProceduralMesh_C_BuildQuad::CallFunc_Normal_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, K2Node_MakeArray_Array_2) == 0x000158, "Member 'BPL_ProceduralMesh_C_BuildQuad::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildQuad, K2Node_MakeStruct_BS_MeshDefinition) == 0x000168, "Member 'BPL_ProceduralMesh_C_BuildQuad::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildPlane
// 0x02C8 (0x02C8 - 0x0000)
struct BPL_ProceduralMesh_C_BuildPlane final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Width;                                             // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Height;                                            // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Normal;                                            // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              Offset;                                            // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         SwapMode;                                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0048(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0050(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	int32                                         Index_0;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              InvSize;                                           // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TexCoords;                                         // 0x00C8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Normals;                                           // 0x00D8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Triangles;                                         // 0x00E8(0x0010)(Edit, BlueprintVisible)
	int32                                         OffsetY;                                           // 0x00F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Verticles;                                         // 0x0100(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue;               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_119[0x3];                                      // 0x0119(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_1;                               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_2;                               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_1;           // 0x0138(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0140(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_2;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_3;                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x3];                                      // 0x0159(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_4;                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_2;           // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_1;           // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_2;           // 0x0179(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue_3;           // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue_1;                       // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0198(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x01A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_1;          // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x01C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Add_Vector2DVector2D_ReturnValue;         // 0x01D0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x01E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x01F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0200(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0208(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_1;                  // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x0228(0x0060)(HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_5;                 // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_6;                 // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Variable_3;                               // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue_2;                  // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Percent_IntInt_ReturnValue_1;             // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Multiply_IntInt_ReturnValue;              // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue_2;          // 0x02A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_7;                 // 0x02A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanXOR_ReturnValue;                   // 0x02A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x02A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2AA[0x6];                                      // 0x02AA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 CallFunc_QuadIndices_Array;                        // 0x02B0(0x0010)(ReferenceParm)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue_3;           // 0x02C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue_8;                 // 0x02C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildPlane) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildPlane");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildPlane) == 0x0002C8, "Wrong size on BPL_ProceduralMesh_C_BuildPlane");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Size) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildPlane::Size' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Width) == 0x000010, "Member 'BPL_ProceduralMesh_C_BuildPlane::Width' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Height) == 0x000014, "Member 'BPL_ProceduralMesh_C_BuildPlane::Height' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Normal) == 0x000018, "Member 'BPL_ProceduralMesh_C_BuildPlane::Normal' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Offset) == 0x000030, "Member 'BPL_ProceduralMesh_C_BuildPlane::Offset' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, SwapMode) == 0x000040, "Member 'BPL_ProceduralMesh_C_BuildPlane::SwapMode' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, __WorldContext) == 0x000048, "Member 'BPL_ProceduralMesh_C_BuildPlane::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Mesh) == 0x000050, "Member 'BPL_ProceduralMesh_C_BuildPlane::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Index_0) == 0x0000B0, "Member 'BPL_ProceduralMesh_C_BuildPlane::Index_0' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, InvSize) == 0x0000B8, "Member 'BPL_ProceduralMesh_C_BuildPlane::InvSize' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, TexCoords) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_BuildPlane::TexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Normals) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_BuildPlane::Normals' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Triangles) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_BuildPlane::Triangles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, OffsetY) == 0x0000F8, "Member 'BPL_ProceduralMesh_C_BuildPlane::OffsetY' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Verticles) == 0x000100, "Member 'BPL_ProceduralMesh_C_BuildPlane::Verticles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Temp_int_Variable) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildPlane::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Percent_IntInt_ReturnValue) == 0x000114, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Percent_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x000118, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue) == 0x00011C, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Temp_int_Variable_1) == 0x000120, "Member 'BPL_ProceduralMesh_C_BuildPlane::Temp_int_Variable_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000128, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_1) == 0x000130, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Temp_int_Variable_2) == 0x000134, "Member 'BPL_ProceduralMesh_C_BuildPlane::Temp_int_Variable_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Conv_IntToDouble_ReturnValue_1) == 0x000138, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Conv_IntToDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_MakeVector2D_ReturnValue) == 0x000140, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_2) == 0x000150, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_3) == 0x000154, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_LessEqual_IntInt_ReturnValue) == 0x000158, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_4) == 0x00015C, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Conv_IntToDouble_ReturnValue_2) == 0x000160, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Conv_IntToDouble_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Subtract_IntInt_ReturnValue) == 0x000168, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_FMax_ReturnValue) == 0x000170, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_LessEqual_IntInt_ReturnValue_1) == 0x000178, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_LessEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_LessEqual_IntInt_ReturnValue_2) == 0x000179, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_LessEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Conv_IntToDouble_ReturnValue_3) == 0x000180, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Conv_IntToDouble_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_FMax_ReturnValue_1) == 0x000188, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_FMax_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000190, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_MakeVector2D_ReturnValue_1) == 0x000198, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x0001A8, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_EqualEqual_IntInt_ReturnValue_1) == 0x0001B8, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_EqualEqual_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x0001C0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_Vector2DVector2D_ReturnValue) == 0x0001D0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Array_Add_ReturnValue) == 0x0001E0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x0001E8, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_BreakVector2D_X) == 0x0001F8, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_BreakVector2D_Y) == 0x000200, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_MakeVector_ReturnValue) == 0x000208, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Array_Add_ReturnValue_1) == 0x000220, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Array_Add_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, K2Node_MakeStruct_BS_MeshDefinition) == 0x000228, "Member 'BPL_ProceduralMesh_C_BuildPlane::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_5) == 0x000288, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_6) == 0x00028C, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, Temp_int_Variable_3) == 0x000290, "Member 'BPL_ProceduralMesh_C_BuildPlane::Temp_int_Variable_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Array_Add_ReturnValue_2) == 0x000294, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Array_Add_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Percent_IntInt_ReturnValue_1) == 0x000298, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Percent_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Multiply_IntInt_ReturnValue) == 0x00029C, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Multiply_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_EqualEqual_IntInt_ReturnValue_2) == 0x0002A0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_EqualEqual_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_7) == 0x0002A4, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_BooleanXOR_ReturnValue) == 0x0002A8, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_BooleanXOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_BooleanAND_ReturnValue) == 0x0002A9, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_QuadIndices_Array) == 0x0002B0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_QuadIndices_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_LessEqual_IntInt_ReturnValue_3) == 0x0002C0, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_LessEqual_IntInt_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildPlane, CallFunc_Add_IntInt_ReturnValue_8) == 0x0002C4, "Member 'BPL_ProceduralMesh_C_BuildPlane::CallFunc_Add_IntInt_ReturnValue_8' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildLine
// 0x0130 (0x0130 - 0x0000)
struct BPL_ProceduralMesh_C_BuildLine final
{
public:
	int32                                         Divisions;                                         // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0010(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	double                                        Size;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector>                        Verices;                                           // 0x0078(0x0010)(Edit, BlueprintVisible)
	int32                                         Temp_int_Variable;                                 // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_IntFloat_ReturnValue;            // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x00B0(0x0060)(HasGetValueTypeHash)
	struct FVector                                CallFunc_MakeVector_ReturnValue;                   // 0x0110(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildLine) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildLine");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildLine) == 0x000130, "Wrong size on BPL_ProceduralMesh_C_BuildLine");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, Divisions) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildLine::Divisions' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, __WorldContext) == 0x000008, "Member 'BPL_ProceduralMesh_C_BuildLine::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, Mesh) == 0x000010, "Member 'BPL_ProceduralMesh_C_BuildLine::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, Size) == 0x000070, "Member 'BPL_ProceduralMesh_C_BuildLine::Size' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, Verices) == 0x000078, "Member 'BPL_ProceduralMesh_C_BuildLine::Verices' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, Temp_int_Variable) == 0x000088, "Member 'BPL_ProceduralMesh_C_BuildLine::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000090, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000098, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_Add_IntInt_ReturnValue) == 0x0000A4, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_Multiply_IntFloat_ReturnValue) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_Multiply_IntFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, K2Node_MakeStruct_BS_MeshDefinition) == 0x0000B0, "Member 'BPL_ProceduralMesh_C_BuildLine::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_MakeVector_ReturnValue) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_MakeVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildLine, CallFunc_Array_Add_ReturnValue) == 0x000128, "Member 'BPL_ProceduralMesh_C_BuildLine::CallFunc_Array_Add_ReturnValue' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildEmpty
// 0x0118 (0x0118 - 0x0000)
struct BPL_ProceduralMesh_C_BuildEmpty final
{
public:
	class UObject*                                __WorldContext;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     BS_MeshDefinition;                                 // 0x0008(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	TArray<struct FProcMeshTangent>               K2Node_MakeArray_Array;                            // 0x0068(0x0010)(ReferenceParm)
	TArray<struct FLinearColor>                   K2Node_MakeArray_Array_1;                          // 0x0078(0x0010)(ReferenceParm)
	TArray<struct FVector2D>                      K2Node_MakeArray_Array_2;                          // 0x0088(0x0010)(ReferenceParm)
	TArray<struct FVector>                        K2Node_MakeArray_Array_3;                          // 0x0098(0x0010)(ReferenceParm)
	TArray<int32>                                 K2Node_MakeArray_Array_4;                          // 0x00A8(0x0010)(ReferenceParm)
	struct FBS_MeshDefinition                     K2Node_MakeStruct_BS_MeshDefinition;               // 0x00B8(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildEmpty) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildEmpty");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildEmpty) == 0x000118, "Wrong size on BPL_ProceduralMesh_C_BuildEmpty");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, __WorldContext) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildEmpty::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, BS_MeshDefinition) == 0x000008, "Member 'BPL_ProceduralMesh_C_BuildEmpty::BS_MeshDefinition' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeArray_Array) == 0x000068, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeArray_Array_1) == 0x000078, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeArray_Array_1' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeArray_Array_2) == 0x000088, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeArray_Array_2' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeArray_Array_3) == 0x000098, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeArray_Array_3' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeArray_Array_4) == 0x0000A8, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeArray_Array_4' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildEmpty, K2Node_MakeStruct_BS_MeshDefinition) == 0x0000B8, "Member 'BPL_ProceduralMesh_C_BuildEmpty::K2Node_MakeStruct_BS_MeshDefinition' has a wrong offset!");

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildCopy
// 0x0120 (0x0120 - 0x0000)
struct BPL_ProceduralMesh_C_BuildCopy final
{
public:
	struct FBS_MeshDefinition                     Mesh;                                              // 0x0000(0x0060)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FBS_MeshDefinition                     Copy;                                              // 0x0068(0x0060)(Parm, OutParm, HasGetValueTypeHash)
	struct FVector2D                              InvSize;                                           // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FVector2D>                      TexCoords;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible)
	TArray<struct FVector>                        Normals;                                           // 0x00E8(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Triangles;                                         // 0x00F8(0x0010)(Edit, BlueprintVisible)
	int32                                         OffsetY;                                           // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        Verticles;                                         // 0x0110(0x0010)(Edit, BlueprintVisible)
};
static_assert(alignof(BPL_ProceduralMesh_C_BuildCopy) == 0x000008, "Wrong alignment on BPL_ProceduralMesh_C_BuildCopy");
static_assert(sizeof(BPL_ProceduralMesh_C_BuildCopy) == 0x000120, "Wrong size on BPL_ProceduralMesh_C_BuildCopy");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, Mesh) == 0x000000, "Member 'BPL_ProceduralMesh_C_BuildCopy::Mesh' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, __WorldContext) == 0x000060, "Member 'BPL_ProceduralMesh_C_BuildCopy::__WorldContext' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, Copy) == 0x000068, "Member 'BPL_ProceduralMesh_C_BuildCopy::Copy' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, InvSize) == 0x0000C8, "Member 'BPL_ProceduralMesh_C_BuildCopy::InvSize' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, TexCoords) == 0x0000D8, "Member 'BPL_ProceduralMesh_C_BuildCopy::TexCoords' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, Normals) == 0x0000E8, "Member 'BPL_ProceduralMesh_C_BuildCopy::Normals' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, Triangles) == 0x0000F8, "Member 'BPL_ProceduralMesh_C_BuildCopy::Triangles' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, OffsetY) == 0x000108, "Member 'BPL_ProceduralMesh_C_BuildCopy::OffsetY' has a wrong offset!");
static_assert(offsetof(BPL_ProceduralMesh_C_BuildCopy, Verticles) == 0x000110, "Member 'BPL_ProceduralMesh_C_BuildCopy::Verticles' has a wrong offset!");

}

