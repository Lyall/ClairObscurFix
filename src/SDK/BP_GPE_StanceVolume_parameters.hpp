#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_StanceVolume

#include "Basic.hpp"

#include "E_jRPG_CharacterWorldCapability_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_GPE_StanceVolume_C_BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.ChangeStanceForALSBaseCharacter
// 0x0010 (0x0010 - 0x0000)
struct BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter final
{
public:
	class AALSBaseCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter");
static_assert(sizeof(BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter) == 0x000010, "Wrong size on BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter, Character) == 0x000000, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter::Character' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter::Enable' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForALSBaseCharacter::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.ChangeStanceForCharacterWorld
// 0x0010 (0x0010 - 0x0000)
struct BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld final
{
public:
	class ABP_jRPG_Character_World_C*             CharacterWorld;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld");
static_assert(sizeof(BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld) == 0x000010, "Wrong size on BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld, CharacterWorld) == 0x000000, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld::CharacterWorld' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld::Enable' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'BP_GPE_StanceVolume_C_ChangeStanceForCharacterWorld::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.ExecuteUbergraph_BP_GPE_StanceVolume
// 0x0180 (0x0180 - 0x0000)
struct BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0048(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ABP_jRPG_Character_World_C*             K2Node_DynamicCast_AsBP_J_RPG_Character_World;     // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0148(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_jRPG_Character_World_C*             K2Node_DynamicCast_AsBP_J_RPG_Character_World_1;   // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0158(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_159[0x7];                                      // 0x0159(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AALSBaseCharacter*                      K2Node_DynamicCast_AsALSBase_Character;            // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AALSBaseCharacter*                      K2Node_DynamicCast_AsALSBase_Character_1;          // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume");
static_assert(sizeof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume) == 0x000180, "Wrong size on BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, EntryPoint) == 0x000000, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000008, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherActor) == 0x000010, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherComp) == 0x000018, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000020, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000028, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000030, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000038, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000040, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_bFromSweep) == 0x000044, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_ComponentBoundEvent_SweepResult) == 0x000048, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_AsBP_J_RPG_Character_World) == 0x000140, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_AsBP_J_RPG_Character_World' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_bSuccess) == 0x000148, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_AsBP_J_RPG_Character_World_1) == 0x000150, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_AsBP_J_RPG_Character_World_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_bSuccess_1) == 0x000158, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_AsALSBase_Character) == 0x000160, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_AsALSBase_Character' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_bSuccess_2) == 0x000168, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_AsALSBase_Character_1) == 0x000170, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_AsALSBase_Character_1' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume, K2Node_DynamicCast_bSuccess_3) == 0x000178, "Member 'BP_GPE_StanceVolume_C_ExecuteUbergraph_BP_GPE_StanceVolume::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.SetALSCharacterToCrouching
// 0x0010 (0x0010 - 0x0000)
struct BP_GPE_StanceVolume_C_SetALSCharacterToCrouching final
{
public:
	class AALSBaseCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_SetALSCharacterToCrouching) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_SetALSCharacterToCrouching");
static_assert(sizeof(BP_GPE_StanceVolume_C_SetALSCharacterToCrouching) == 0x000010, "Wrong size on BP_GPE_StanceVolume_C_SetALSCharacterToCrouching");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetALSCharacterToCrouching, Character) == 0x000000, "Member 'BP_GPE_StanceVolume_C_SetALSCharacterToCrouching::Character' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetALSCharacterToCrouching, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_SetALSCharacterToCrouching::Enable' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.SetALSCharacterToStanding
// 0x0010 (0x0010 - 0x0000)
struct BP_GPE_StanceVolume_C_SetALSCharacterToStanding final
{
public:
	class AALSBaseCharacter*                      Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_SetALSCharacterToStanding) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_SetALSCharacterToStanding");
static_assert(sizeof(BP_GPE_StanceVolume_C_SetALSCharacterToStanding) == 0x000010, "Wrong size on BP_GPE_StanceVolume_C_SetALSCharacterToStanding");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetALSCharacterToStanding, Character) == 0x000000, "Member 'BP_GPE_StanceVolume_C_SetALSCharacterToStanding::Character' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetALSCharacterToStanding, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_SetALSCharacterToStanding::Enable' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.SetCharacterWorldToStanceCrouching
// 0x0060 (0x0060 - 0x0000)
struct BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching final
{
public:
	class ABP_jRPG_Character_World_C*             CharacterWorld;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_jRPG_CharacterWorldCapability, bool>   K2Node_MakeMap_Map;                                // 0x0010(0x0050)()
};
static_assert(alignof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching");
static_assert(sizeof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching) == 0x000060, "Wrong size on BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching, CharacterWorld) == 0x000000, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching::CharacterWorld' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching::Enable' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching, K2Node_MakeMap_Map) == 0x000010, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceCrouching::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.SetCharacterWorldToStanceStanding
// 0x0060 (0x0060 - 0x0000)
struct BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding final
{
public:
	class ABP_jRPG_Character_World_C*             CharacterWorld;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable;                                            // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_jRPG_CharacterWorldCapability, bool>   K2Node_MakeMap_Map;                                // 0x0010(0x0050)()
};
static_assert(alignof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding) == 0x000008, "Wrong alignment on BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding");
static_assert(sizeof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding) == 0x000060, "Wrong size on BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding, CharacterWorld) == 0x000000, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding::CharacterWorld' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding, Enable) == 0x000008, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding::Enable' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding, CallFunc_Not_PreBool_ReturnValue) == 0x000009, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding, K2Node_MakeMap_Map) == 0x000010, "Member 'BP_GPE_StanceVolume_C_SetCharacterWorldToStanceStanding::K2Node_MakeMap_Map' has a wrong offset!");

// Function BP_GPE_StanceVolume.BP_GPE_StanceVolume_C.UserConstructionScript
// 0x0001 (0x0001 - 0x0000)
struct BP_GPE_StanceVolume_C_UserConstructionScript final
{
public:
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_GPE_StanceVolume_C_UserConstructionScript) == 0x000001, "Wrong alignment on BP_GPE_StanceVolume_C_UserConstructionScript");
static_assert(sizeof(BP_GPE_StanceVolume_C_UserConstructionScript) == 0x000001, "Wrong size on BP_GPE_StanceVolume_C_UserConstructionScript");
static_assert(offsetof(BP_GPE_StanceVolume_C_UserConstructionScript, K2Node_SwitchEnum_CmpSuccess) == 0x000000, "Member 'BP_GPE_StanceVolume_C_UserConstructionScript::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

