#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineScatterFloating

#include "Basic.hpp"

#include "BP_SplineScatterFloating_classes.hpp"
#include "BP_SplineScatterFloating_parameters.hpp"


namespace SDK
{

// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.UserConstructionScript
// (Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_SplineScatterFloating_C::UserConstructionScript()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "UserConstructionScript");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.Use Actor Collisions for Static
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_SplineScatterFloating_C::Use_Actor_Collisions_for_Static()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "Use Actor Collisions for Static");

	Params::BP_SplineScatterFloating_C_Use_Actor_Collisions_for_Static Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.TransformForInstances
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const int32&                            Seed_0                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  Spacing_0                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UInstancedStaticMeshComponent*    Instance_picked                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

struct FTransform ABP_SplineScatterFloating_C::TransformForInstances(const int32& Seed_0, int32 Index_0, double Spacing_0, class UInstancedStaticMeshComponent* Instance_picked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "TransformForInstances");

	Params::BP_SplineScatterFloating_C_TransformForInstances Parms{};

	Parms.Seed_0 = Seed_0;
	Parms.Index_0 = Index_0;
	Parms.Spacing_0 = Spacing_0;
	Parms.Instance_picked = Instance_picked;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.ReceiveTick
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineScatterFloating_C::ReceiveTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "ReceiveTick");

	Params::BP_SplineScatterFloating_C_ReceiveTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_SplineScatterFloating_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.How Many Instances Is There
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineScatterFloating_C::How_Many_Instances_Is_There()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "How Many Instances Is There");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.GenerateMeshInstances
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineScatterFloating_C::GenerateMeshInstances()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "GenerateMeshInstances");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.Generate Instances Infos
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector*                         Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         Speed                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator*                        Rotation                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_SplineScatterFloating_C::Generate_Instances_Infos(struct FVector* Location, struct FVector* Speed, struct FRotator* Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "Generate Instances Infos");

	Params::BP_SplineScatterFloating_C_Generate_Instances_Infos Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);

	if (Speed != nullptr)
		*Speed = std::move(Parms.Speed);

	if (Rotation != nullptr)
		*Rotation = std::move(Parms.Rotation);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.ExecuteUbergraph_BP_SplineScatterFloating
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineScatterFloating_C::ExecuteUbergraph_BP_SplineScatterFloating(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "ExecuteUbergraph_BP_SplineScatterFloating");

	Params::BP_SplineScatterFloating_C_ExecuteUbergraph_BP_SplineScatterFloating Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.CheckPlayerDistance
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool*                                   IsClose_0                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineScatterFloating_C::CheckPlayerDistance(bool* IsClose_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "CheckPlayerDistance");

	Params::BP_SplineScatterFloating_C_CheckPlayerDistance Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (IsClose_0 != nullptr)
		*IsClose_0 = Parms.IsClose_0;
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.CheckForErrors
// (Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FText>&                    ErrorMessages                                          (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool ABP_SplineScatterFloating_C::CheckForErrors(TArray<class FText>& ErrorMessages)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "CheckForErrors");

	Params::BP_SplineScatterFloating_C_CheckForErrors Parms{};

	Parms.ErrorMessages = std::move(ErrorMessages);

	UObject::ProcessEvent(Func, &Parms);

	ErrorMessages = std::move(Parms.ErrorMessages);

	return Parms.ReturnValue;
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.ChangeTickRate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Condition                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_SplineScatterFloating_C::ChangeTickRate(bool Condition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "ChangeTickRate");

	Params::BP_SplineScatterFloating_C_ChangeTickRate Parms{};

	Parms.Condition = Condition;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_SplineScatterFloating.BP_SplineScatterFloating_C.Button New Seed
// (BlueprintCallable, BlueprintEvent)

void ABP_SplineScatterFloating_C::Button_New_Seed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_SplineScatterFloating_C", "Button New Seed");

	UObject::ProcessEvent(Func, nullptr);
}

}

