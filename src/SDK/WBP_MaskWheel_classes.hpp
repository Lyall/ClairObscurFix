#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MaskWheel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Transform_Masks_Mechanic_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MaskWheel.WBP_MaskWheel_C
// 0x0140 (0x0420 - 0x02E0)
class UWBP_MaskWheel_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ArrowMove;                                    // 0x02E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UNiagaraSystemWidget*                   FX_SmokeExplosion;                                 // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_GlowContainer_C*                   HandGlow;                                          // 0x02F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask0;                                             // 0x0300(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask1;                                             // 0x0308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask2;                                             // 0x0310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask3;                                             // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask4;                                             // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask5;                                             // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask6;                                             // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask7;                                             // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_MaskWidget_C*                      Mask8;                                             // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	int32                                         CurrentMeter;                                      // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34C[0x4];                                      // 0x034C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_Transform_Masks_Mechanic>            CurrentMaskList;                                   // 0x0350(0x0010)(Edit, BlueprintVisible)
	double                                        ArrowAnimationProgress;                            // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	double                                        TargetHandAngle;                                   // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentHandAngle;                                  // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Index0Angle;                                       // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<E_Transform_Masks_Mechanic, TSoftObjectPtr<class UTexture2D>> MaskTextureMap;               // 0x0380(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_Transform_Masks_Mechanic, TSoftObjectPtr<class UTexture2D>> ActiveMaskTextureMap;         // 0x03D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void CreateMaskWheel();
	void EndRefresh();
	void ExecuteUbergraph_WBP_MaskWheel(int32 EntryPoint);
	void FX_FeedbackExplosion();
	void GetAngleForMeter(int32 InMeter, double* Angle);
	double GetAngleFromProgress(double Alpha);
	void LoadMasksWheel(TArray<E_Transform_Masks_Mechanic>& MaskList);
	void PreConstruct(bool IsDesignTime);
	void RefreshCurrentMeter();
	void SetArrowAnimationProgress(double NewValue);
	void SetCurrentMeter(int32 CurrentMeter_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MaskWheel_C">();
	}
	static class UWBP_MaskWheel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MaskWheel_C>();
	}
};
static_assert(alignof(UWBP_MaskWheel_C) == 0x000008, "Wrong alignment on UWBP_MaskWheel_C");
static_assert(sizeof(UWBP_MaskWheel_C) == 0x000420, "Wrong size on UWBP_MaskWheel_C");
static_assert(offsetof(UWBP_MaskWheel_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_MaskWheel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Anim_ArrowMove) == 0x0002E8, "Member 'UWBP_MaskWheel_C::Anim_ArrowMove' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, FX_SmokeExplosion) == 0x0002F0, "Member 'UWBP_MaskWheel_C::FX_SmokeExplosion' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, HandGlow) == 0x0002F8, "Member 'UWBP_MaskWheel_C::HandGlow' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask0) == 0x000300, "Member 'UWBP_MaskWheel_C::Mask0' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask1) == 0x000308, "Member 'UWBP_MaskWheel_C::Mask1' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask2) == 0x000310, "Member 'UWBP_MaskWheel_C::Mask2' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask3) == 0x000318, "Member 'UWBP_MaskWheel_C::Mask3' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask4) == 0x000320, "Member 'UWBP_MaskWheel_C::Mask4' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask5) == 0x000328, "Member 'UWBP_MaskWheel_C::Mask5' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask6) == 0x000330, "Member 'UWBP_MaskWheel_C::Mask6' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask7) == 0x000338, "Member 'UWBP_MaskWheel_C::Mask7' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Mask8) == 0x000340, "Member 'UWBP_MaskWheel_C::Mask8' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, CurrentMeter) == 0x000348, "Member 'UWBP_MaskWheel_C::CurrentMeter' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, CurrentMaskList) == 0x000350, "Member 'UWBP_MaskWheel_C::CurrentMaskList' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, ArrowAnimationProgress) == 0x000360, "Member 'UWBP_MaskWheel_C::ArrowAnimationProgress' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, TargetHandAngle) == 0x000368, "Member 'UWBP_MaskWheel_C::TargetHandAngle' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, CurrentHandAngle) == 0x000370, "Member 'UWBP_MaskWheel_C::CurrentHandAngle' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, Index0Angle) == 0x000378, "Member 'UWBP_MaskWheel_C::Index0Angle' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, MaskTextureMap) == 0x000380, "Member 'UWBP_MaskWheel_C::MaskTextureMap' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWheel_C, ActiveMaskTextureMap) == 0x0003D0, "Member 'UWBP_MaskWheel_C::ActiveMaskTextureMap' has a wrong offset!");

}

