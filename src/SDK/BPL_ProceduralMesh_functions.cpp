#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_ProceduralMesh

#include "Basic.hpp"

#include "BPL_ProceduralMesh_classes.hpp"
#include "BPL_ProceduralMesh_parameters.hpp"


namespace SDK
{

// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineTCoeff
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  T1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 WP1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WT1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WP2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WT2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::SplineTCoeff(double T1, class UObject* __WorldContext, double* WP1, double* WT1, double* WP2, double* WT2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "SplineTCoeff");

	Params::BPL_ProceduralMesh_C_SplineTCoeff Parms{};

	Parms.T1 = T1;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WP1 != nullptr)
		*WP1 = Parms.WP1;

	if (WT1 != nullptr)
		*WT1 = Parms.WT1;

	if (WP2 != nullptr)
		*WP2 = Parms.WP2;

	if (WT2 != nullptr)
		*WT2 = Parms.WT2;
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineT
// (Static, Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AT                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   BT                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         R                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::SplineT(const struct FVector& A, const struct FVector& AT, const struct FVector& B, const struct FVector& BT, double T, class UObject* __WorldContext, struct FVector* R)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "SplineT");

	Params::BPL_ProceduralMesh_C_SplineT Parms{};

	Parms.A = std::move(A);
	Parms.AT = std::move(AT);
	Parms.B = std::move(B);
	Parms.BT = std::move(BT);
	Parms.T = T;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (R != nullptr)
		*R = std::move(Parms.R);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.SplineCoeff
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 WP1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WT1                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WP2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 WT2                                                    (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::SplineCoeff(double T, class UObject* __WorldContext, double* WP1, double* WT1, double* WP2, double* WT2)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "SplineCoeff");

	Params::BPL_ProceduralMesh_C_SplineCoeff Parms{};

	Parms.T = T;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (WP1 != nullptr)
		*WP1 = Parms.WP1;

	if (WT1 != nullptr)
		*WT1 = Parms.WT1;

	if (WP2 != nullptr)
		*WP2 = Parms.WP2;

	if (WT2 != nullptr)
		*WT2 = Parms.WT2;
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Spline
// (Static, Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector&                   A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   AT                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   BT                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector*                         R                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::Spline(const struct FVector& A, const struct FVector& AT, const struct FVector& B, const struct FVector& BT, double T, class UObject* __WorldContext, struct FVector* R)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "Spline");

	Params::BPL_ProceduralMesh_C_Spline Parms{};

	Parms.A = std::move(A);
	Parms.AT = std::move(AT);
	Parms.B = std::move(B);
	Parms.BT = std::move(BT);
	Parms.T = T;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (R != nullptr)
		*R = std::move(Parms.R);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.QuadIndices
// (Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   I0                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   I1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   I2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   I3                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    Swap                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>*                          Array                                                  (Parm, OutParm)

void UBPL_ProceduralMesh_C::QuadIndices(int32 I0, int32 I1, int32 I2, int32 I3, bool Swap, class UObject* __WorldContext, TArray<int32>* Array)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "QuadIndices");

	Params::BPL_ProceduralMesh_C_QuadIndices Parms{};

	Parms.I0 = I0;
	Parms.I1 = I1;
	Parms.I2 = I2;
	Parms.I3 = I3;
	Parms.Swap = Swap;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Array != nullptr)
		*Array = std::move(Parms.Array);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.PackIntToColor
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double*                                 R                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 G                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 B                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double*                                 A                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::PackIntToColor(int32 Value, class UObject* __WorldContext, double* R, double* G, double* B, double* A)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "PackIntToColor");

	Params::BPL_ProceduralMesh_C_PackIntToColor Parms{};

	Parms.Value = Value;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (R != nullptr)
		*R = Parms.R;

	if (G != nullptr)
		*G = Parms.G;

	if (B != nullptr)
		*B = Parms.B;

	if (A != nullptr)
		*A = Parms.A;
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Pack4Ints
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value3                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value4                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32*                                  Bits                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::Pack4Ints(int32 Value1, int32 Value2, int32 Value3, int32 Value4, class UObject* __WorldContext, int32* Bits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "Pack4Ints");

	Params::BPL_ProceduralMesh_C_Pack4Ints Parms{};

	Parms.Value1 = Value1;
	Parms.Value2 = Value2;
	Parms.Value3 = Value3;
	Parms.Value4 = Value4;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Bits != nullptr)
		*Bits = Parms.Bits;
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Pack3Ints
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Value1                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value2                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Value3                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32*                                  Bits                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::Pack3Ints(int32 Value1, int32 Value2, int32 Value3, class UObject* __WorldContext, int32* Bits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "Pack3Ints");

	Params::BPL_ProceduralMesh_C_Pack3Ints Parms{};

	Parms.Value1 = Value1;
	Parms.Value2 = Value2;
	Parms.Value3 = Value3;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Bits != nullptr)
		*Bits = Parms.Bits;
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModUVMapPlane
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModUVMapPlane(const struct FBS_MeshDefinition& InMesh, const struct FTransform& Transform, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModUVMapPlane");

	Params::BPL_ProceduralMesh_C_ModUVMapPlane Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.Transform = std::move(Transform);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModTransformUV
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FVector2D&                 Scale                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Move                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModTransformUV(const struct FBS_MeshDefinition& InMesh, const struct FVector2D& Scale, const struct FVector2D& Move, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModTransformUV");

	Params::BPL_ProceduralMesh_C_ModTransformUV Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.Scale = std::move(Scale);
	Parms.Move = std::move(Move);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModTransform
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FTransform&                Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModTransform(const struct FBS_MeshDefinition& InMesh, const struct FTransform& Transform, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModTransform");

	Params::BPL_ProceduralMesh_C_ModTransform Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.Transform = std::move(Transform);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModQuad
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FVector&                   P1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   P2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   P3                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   P4                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModQuad(const struct FBS_MeshDefinition& InMesh, const struct FVector& P1, const struct FVector& P2, const struct FVector& P3, const struct FVector& P4, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModQuad");

	Params::BPL_ProceduralMesh_C_ModQuad Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.P1 = std::move(P1);
	Parms.P2 = std::move(P2);
	Parms.P3 = std::move(P3);
	Parms.P4 = std::move(P4);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModExtrudeLine
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// double                                  Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    GenerateUV                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Divisons                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModExtrudeLine(const struct FBS_MeshDefinition& InMesh, double Width, bool GenerateUV, int32 Divisons, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModExtrudeLine");

	Params::BPL_ProceduralMesh_C_ModExtrudeLine Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.Width = Width;
	Parms.GenerateUV = GenerateUV;
	Parms.Divisons = Divisons;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModColor
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMesh                                                 (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// const struct FLinearColor&              NewColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModColor(const struct FBS_MeshDefinition& InMesh, const struct FLinearColor& NewColor, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModColor");

	Params::BPL_ProceduralMesh_C_ModColor Parms{};

	Parms.InMesh = std::move(InMesh);
	Parms.NewColor = std::move(NewColor);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.ModAppend
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        InMeshA                                                (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// struct FBS_MeshDefinition&              InMeshB                                                (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              OutMesh                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::ModAppend(const struct FBS_MeshDefinition& InMeshA, struct FBS_MeshDefinition& InMeshB, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "ModAppend");

	Params::BPL_ProceduralMesh_C_ModAppend Parms{};

	Parms.InMeshA = std::move(InMeshA);
	Parms.InMeshB = std::move(InMeshB);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	InMeshB = std::move(Parms.InMeshB);

	if (OutMesh != nullptr)
		*OutMesh = std::move(Parms.OutMesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.LogStats
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBS_MeshDefinition&              Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// bool                                    PrintTriangles                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PrintLocations                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    PrintColors                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::LogStats(struct FBS_MeshDefinition& Mesh, bool PrintTriangles, bool PrintLocations, bool PrintColors, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "LogStats");

	Params::BPL_ProceduralMesh_C_LogStats Parms{};

	Parms.Mesh = std::move(Mesh);
	Parms.PrintTriangles = PrintTriangles;
	Parms.PrintLocations = PrintLocations;
	Parms.PrintColors = PrintColors;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.Lerp
// (Static, Private, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FVector2D&                 A                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 B                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  T                                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector2D*                       R                                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::Lerp(const struct FVector2D& A, const struct FVector2D& B, double T, class UObject* __WorldContext, struct FVector2D* R)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "Lerp");

	Params::BPL_ProceduralMesh_C_Lerp Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);
	Parms.T = T;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (R != nullptr)
		*R = std::move(Parms.R);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.DrawDebugMesh
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FBS_MeshDefinition&              Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::DrawDebugMesh(struct FBS_MeshDefinition& Mesh, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "DrawDebugMesh");

	Params::BPL_ProceduralMesh_C_DrawDebugMesh Parms{};

	Parms.Mesh = std::move(Mesh);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.CreateMeshSection
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UProceduralMeshComponent*         Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// const struct FBS_MeshDefinition&        MeshDefinition                                         (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   SectionIndex                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bCreateCollision                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::CreateMeshSection(class UProceduralMeshComponent* Target, const struct FBS_MeshDefinition& MeshDefinition, int32 SectionIndex, bool bCreateCollision, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "CreateMeshSection");

	Params::BPL_ProceduralMesh_C_CreateMeshSection Parms{};

	Parms.Target = Target;
	Parms.MeshDefinition = std::move(MeshDefinition);
	Parms.SectionIndex = SectionIndex;
	Parms.bCreateCollision = bCreateCollision;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildSplit
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// int32                                   LastIndex                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              MeshOut                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildSplit(const struct FBS_MeshDefinition& Mesh, int32 LastIndex, class UObject* __WorldContext, struct FBS_MeshDefinition* MeshOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildSplit");

	Params::BPL_ProceduralMesh_C_BuildSplit Parms{};

	Parms.Mesh = std::move(Mesh);
	Parms.LastIndex = LastIndex;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MeshOut != nullptr)
		*MeshOut = std::move(Parms.MeshOut);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildSplineBillboard
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   StartPos                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   EndPos                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   StartTangent                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   EndTangent                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 StartUV                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 EndUV                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              StartColor                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              EndColor                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Up                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition&              Triangles                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              Mesh                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildSplineBillboard(const struct FVector& StartPos, const struct FVector& EndPos, const struct FVector& StartTangent, const struct FVector& EndTangent, const struct FVector2D& StartUV, const struct FVector2D& EndUV, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, const struct FVector& Up, struct FBS_MeshDefinition& Triangles, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildSplineBillboard");

	Params::BPL_ProceduralMesh_C_BuildSplineBillboard Parms{};

	Parms.StartPos = std::move(StartPos);
	Parms.EndPos = std::move(EndPos);
	Parms.StartTangent = std::move(StartTangent);
	Parms.EndTangent = std::move(EndTangent);
	Parms.StartUV = std::move(StartUV);
	Parms.EndUV = std::move(EndUV);
	Parms.StartColor = std::move(StartColor);
	Parms.EndColor = std::move(EndColor);
	Parms.Up = std::move(Up);
	Parms.Triangles = std::move(Triangles);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Triangles = std::move(Parms.Triangles);

	if (Mesh != nullptr)
		*Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildRemove
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FBS_MeshDefinition&        Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// TArray<bool>&                           RemoeIndex                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              MeshOut                                                (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildRemove(const struct FBS_MeshDefinition& Mesh, TArray<bool>& RemoeIndex, class UObject* __WorldContext, struct FBS_MeshDefinition* MeshOut)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildRemove");

	Params::BPL_ProceduralMesh_C_BuildRemove Parms{};

	Parms.Mesh = std::move(Mesh);
	Parms.RemoeIndex = std::move(RemoeIndex);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	RemoeIndex = std::move(Parms.RemoeIndex);

	if (MeshOut != nullptr)
		*MeshOut = std::move(Parms.MeshOut);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildQuad
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   v1                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   v2                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   V3                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   V4                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              Mesh                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildQuad(const struct FVector& v1, const struct FVector& v2, const struct FVector& V3, const struct FVector& V4, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildQuad");

	Params::BPL_ProceduralMesh_C_BuildQuad Parms{};

	Parms.v1 = std::move(v1);
	Parms.v2 = std::move(v2);
	Parms.V3 = std::move(V3);
	Parms.V4 = std::move(V4);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildPlane
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector2D&                 Size                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Width                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Height                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   Normal                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector2D&                 Offset                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   SwapMode                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              Mesh                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildPlane(const struct FVector2D& Size, int32 Width, int32 Height, const struct FVector& Normal, const struct FVector2D& Offset, int32 SwapMode, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildPlane");

	Params::BPL_ProceduralMesh_C_BuildPlane Parms{};

	Parms.Size = std::move(Size);
	Parms.Width = Width;
	Parms.Height = Height;
	Parms.Normal = std::move(Normal);
	Parms.Offset = std::move(Offset);
	Parms.SwapMode = SwapMode;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildLine
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Divisions                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              Mesh                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildLine(int32 Divisions, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildLine");

	Params::BPL_ProceduralMesh_C_BuildLine Parms{};

	Parms.Divisions = Divisions;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Mesh != nullptr)
		*Mesh = std::move(Parms.Mesh);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildEmpty
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              BS_MeshDefinition                                      (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildEmpty(class UObject* __WorldContext, struct FBS_MeshDefinition* BS_MeshDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildEmpty");

	Params::BPL_ProceduralMesh_C_BuildEmpty Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BS_MeshDefinition != nullptr)
		*BS_MeshDefinition = std::move(Parms.BS_MeshDefinition);
}


// Function BPL_ProceduralMesh.BPL_ProceduralMesh_C.BuildCopy
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// const struct FBS_MeshDefinition&        Mesh                                                   (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FBS_MeshDefinition*              Copy                                                   (Parm, OutParm, HasGetValueTypeHash)

void UBPL_ProceduralMesh_C::BuildCopy(const struct FBS_MeshDefinition& Mesh, class UObject* __WorldContext, struct FBS_MeshDefinition* Copy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_ProceduralMesh_C", "BuildCopy");

	Params::BPL_ProceduralMesh_C_BuildCopy Parms{};

	Parms.Mesh = std::move(Mesh);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Copy != nullptr)
		*Copy = std::move(Parms.Copy);
}

}

