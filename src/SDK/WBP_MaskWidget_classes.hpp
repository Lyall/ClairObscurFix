#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_MaskWidget

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Transform_Masks_Mechanic_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CommonUI_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_MaskWidget.WBP_MaskWidget_C
// 0x01A0 (0x04A8 - 0x0308)
class UWBP_MaskWidget_C final : public UCommonUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Anim_ScaleDown;                                    // 0x0310(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Anim_ScaleUp;                                      // 0x0318(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UCommonLazyImage*                       AlphaIcon;                                         // 0x0320(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNiagaraSystemWidget*                   FX_ExplosionVertical;                              // 0x0328(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonLazyImage*                       MaskIcon;                                          // 0x0330(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               MaskSizeBox;                                       // 0x0338(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UNiagaraSystemWidget*                   NiagaraSystemWidget_Loop;                          // 0x0340(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox;                                       // 0x0348(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Inactive_Texture;                                  // 0x0350(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash)
	TSoftObjectPtr<class UTexture2D>              Active_Texture;                                    // 0x0378(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x03A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ReverseFXVelocity;                                 // 0x03A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A2[0x6];                                      // 0x03A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_UniqueMechanic_TransformMasks_Component_C* TransformMaskComponent;                     // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TMap<E_Transform_Masks_Mechanic, TSoftObjectPtr<class UTexture2D>> MaskTextureMap;               // 0x03B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_Transform_Masks_Mechanic, TSoftObjectPtr<class UTexture2D>> ActiveMaskTextureMap;         // 0x0400(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<E_Transform_Masks_Mechanic, struct FLinearColor> MaskColors;                                // 0x0450(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Height;                                            // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void Construct();
	void ExecuteUbergraph_WBP_MaskWidget(int32 EntryPoint);
	void GetMaskColor(const E_Transform_Masks_Mechanic& Mask, struct FLinearColor* Color);
	void OnSetMask(E_Transform_Masks_Mechanic PreviousMask, E_Transform_Masks_Mechanic NewMask, int32 NewMeter);
	void PreConstruct(bool IsDesignTime);
	void SetBrushFromLazyTexture(const TSoftObjectPtr<class UTexture2D>& InactiveTexture, TSoftObjectPtr<class UTexture2D> ActiveTexture, bool IsActiveAtStart);
	void SetCurrentMask(E_Transform_Masks_Mechanic CurrentMask, bool IsActiveAtStart);
	void SetIsActive(bool IsActive_0);
	void SetMaskComponent(class UBP_UniqueMechanic_TransformMasks_Component_C* TransformMaskComponent_0);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_MaskWidget_C">();
	}
	static class UWBP_MaskWidget_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_MaskWidget_C>();
	}
};
static_assert(alignof(UWBP_MaskWidget_C) == 0x000008, "Wrong alignment on UWBP_MaskWidget_C");
static_assert(sizeof(UWBP_MaskWidget_C) == 0x0004A8, "Wrong size on UWBP_MaskWidget_C");
static_assert(offsetof(UWBP_MaskWidget_C, UberGraphFrame) == 0x000308, "Member 'UWBP_MaskWidget_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, Anim_ScaleDown) == 0x000310, "Member 'UWBP_MaskWidget_C::Anim_ScaleDown' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, Anim_ScaleUp) == 0x000318, "Member 'UWBP_MaskWidget_C::Anim_ScaleUp' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, AlphaIcon) == 0x000320, "Member 'UWBP_MaskWidget_C::AlphaIcon' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, FX_ExplosionVertical) == 0x000328, "Member 'UWBP_MaskWidget_C::FX_ExplosionVertical' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, MaskIcon) == 0x000330, "Member 'UWBP_MaskWidget_C::MaskIcon' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, MaskSizeBox) == 0x000338, "Member 'UWBP_MaskWidget_C::MaskSizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, NiagaraSystemWidget_Loop) == 0x000340, "Member 'UWBP_MaskWidget_C::NiagaraSystemWidget_Loop' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, RetainerBox) == 0x000348, "Member 'UWBP_MaskWidget_C::RetainerBox' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, Inactive_Texture) == 0x000350, "Member 'UWBP_MaskWidget_C::Inactive_Texture' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, Active_Texture) == 0x000378, "Member 'UWBP_MaskWidget_C::Active_Texture' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, IsActive) == 0x0003A0, "Member 'UWBP_MaskWidget_C::IsActive' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, ReverseFXVelocity) == 0x0003A1, "Member 'UWBP_MaskWidget_C::ReverseFXVelocity' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, TransformMaskComponent) == 0x0003A8, "Member 'UWBP_MaskWidget_C::TransformMaskComponent' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, MaskTextureMap) == 0x0003B0, "Member 'UWBP_MaskWidget_C::MaskTextureMap' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, ActiveMaskTextureMap) == 0x000400, "Member 'UWBP_MaskWidget_C::ActiveMaskTextureMap' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, MaskColors) == 0x000450, "Member 'UWBP_MaskWidget_C::MaskColors' has a wrong offset!");
static_assert(offsetof(UWBP_MaskWidget_C, Height) == 0x0004A0, "Member 'UWBP_MaskWidget_C::Height' has a wrong offset!");

}

