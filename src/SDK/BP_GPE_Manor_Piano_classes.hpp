#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_Manor_Piano

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_jRPG_InteractionObject_Base_classes.hpp"
#include "E_CharacterList_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_Manor_Piano.BP_GPE_Manor_Piano_C
// 0x00E0 (0x03D0 - 0x02F0)
class ABP_GPE_Manor_Piano_C final : public ABP_jRPG_InteractionObject_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_GPE_Manor_Piano_C;               // 0x02F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   GrandPiano_Test_PlaceHolder;                       // 0x02F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Aline_Soft;                               // 0x0300(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         CurrentMusicIndex;                                 // 0x0310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Alicia_Soft;                              // 0x0318(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	E_CharacterList                               PreviousWorldCharacter;                            // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USoundBase*>                     Playlist_Aline_Hard;                               // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundBase*>                     Playlist_Alicia_Hard;                              // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundBase*>                     Playlist_Lune_Hard;                                // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Lune_Soft;                                // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundBase*>                     Playlist_Sciel_Hard;                               // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundBase*>                     Playlist_Verso_Hard;                               // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Sciel_Soft;                               // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Verso_Soft;                               // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class USoundBase*>                     Playlist_Gustave_Hard;                             // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<TSoftObjectPtr<class USoundBase>>      Playlist_Gustave_Soft;                             // 0x03C0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void BndEvt__BP_GPE_Manor_Piano_InteractionRange_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_GPE_Manor_Piano_InteractionRange_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_GPE_Manor_Piano(int32 EntryPoint);
	void GetInteractionPromptParams(struct FFPromptParams* PromptParams);
	void OnInteractionRequested(class ABP_jRPG_Character_World_C* InteractingWorldCharacter, bool Instant);
	void OnLoaded_15640CA4409829B0685D7299A24C68A5(class UObject* Loaded);
	void OnLoaded_4EA72A634348FE9FE4B6EEB63C138D95(class UObject* Loaded);
	void OnLoaded_7E2BE2744DE404D87B7316AD8031D202(class UObject* Loaded);
	void OnLoaded_8DE66D2D4C811D5DA38BF9875502AEB8(class UObject* Loaded);
	void OnLoaded_B916CACA4E1BA09B227D539BC97D4EF0(class UObject* Loaded);
	void OnLoaded_D0F488884D2906867D0CCDAF2B2A04C8(class UObject* Loaded);
	void ReceiveBeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_Manor_Piano_C">();
	}
	static class ABP_GPE_Manor_Piano_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_Manor_Piano_C>();
	}
};
static_assert(alignof(ABP_GPE_Manor_Piano_C) == 0x000008, "Wrong alignment on ABP_GPE_Manor_Piano_C");
static_assert(sizeof(ABP_GPE_Manor_Piano_C) == 0x0003D0, "Wrong size on ABP_GPE_Manor_Piano_C");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, UberGraphFrame_BP_GPE_Manor_Piano_C) == 0x0002F0, "Member 'ABP_GPE_Manor_Piano_C::UberGraphFrame_BP_GPE_Manor_Piano_C' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, GrandPiano_Test_PlaceHolder) == 0x0002F8, "Member 'ABP_GPE_Manor_Piano_C::GrandPiano_Test_PlaceHolder' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Aline_Soft) == 0x000300, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Aline_Soft' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, CurrentMusicIndex) == 0x000310, "Member 'ABP_GPE_Manor_Piano_C::CurrentMusicIndex' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Alicia_Soft) == 0x000318, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Alicia_Soft' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, PreviousWorldCharacter) == 0x000328, "Member 'ABP_GPE_Manor_Piano_C::PreviousWorldCharacter' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Aline_Hard) == 0x000330, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Aline_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Alicia_Hard) == 0x000340, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Alicia_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Lune_Hard) == 0x000350, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Lune_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Lune_Soft) == 0x000360, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Lune_Soft' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Sciel_Hard) == 0x000370, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Sciel_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Verso_Hard) == 0x000380, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Verso_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Sciel_Soft) == 0x000390, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Sciel_Soft' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Verso_Soft) == 0x0003A0, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Verso_Soft' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Gustave_Hard) == 0x0003B0, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Gustave_Hard' has a wrong offset!");
static_assert(offsetof(ABP_GPE_Manor_Piano_C, Playlist_Gustave_Soft) == 0x0003C0, "Member 'ABP_GPE_Manor_Piano_C::Playlist_Gustave_Soft' has a wrong offset!");

}

