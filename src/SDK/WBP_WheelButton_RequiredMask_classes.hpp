#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_WheelButton_RequiredMask

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "E_Transform_Masks_Mechanic_structs.hpp"
#include "UMG_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_WheelButton_RequiredMask.WBP_WheelButton_RequiredMask_C
// 0x0020 (0x0300 - 0x02E0)
class UWBP_WheelButton_RequiredMask_C final : public UUserWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02E0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 Arrow;                                             // 0x02E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Number;                                            // 0x02F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	E_Transform_Masks_Mechanic                    RequiredMaskType;                                  // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdvanceMeter;                                      // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_WBP_WheelButton_RequiredMask(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_WheelButton_RequiredMask_C">();
	}
	static class UWBP_WheelButton_RequiredMask_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_WheelButton_RequiredMask_C>();
	}
};
static_assert(alignof(UWBP_WheelButton_RequiredMask_C) == 0x000008, "Wrong alignment on UWBP_WheelButton_RequiredMask_C");
static_assert(sizeof(UWBP_WheelButton_RequiredMask_C) == 0x000300, "Wrong size on UWBP_WheelButton_RequiredMask_C");
static_assert(offsetof(UWBP_WheelButton_RequiredMask_C, UberGraphFrame) == 0x0002E0, "Member 'UWBP_WheelButton_RequiredMask_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_WheelButton_RequiredMask_C, Arrow) == 0x0002E8, "Member 'UWBP_WheelButton_RequiredMask_C::Arrow' has a wrong offset!");
static_assert(offsetof(UWBP_WheelButton_RequiredMask_C, Number) == 0x0002F0, "Member 'UWBP_WheelButton_RequiredMask_C::Number' has a wrong offset!");
static_assert(offsetof(UWBP_WheelButton_RequiredMask_C, RequiredMaskType) == 0x0002F8, "Member 'UWBP_WheelButton_RequiredMask_C::RequiredMaskType' has a wrong offset!");
static_assert(offsetof(UWBP_WheelButton_RequiredMask_C, AdvanceMeter) == 0x0002FC, "Member 'UWBP_WheelButton_RequiredMask_C::AdvanceMeter' has a wrong offset!");

}

