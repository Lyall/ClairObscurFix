#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_DiegeticMusicWithVolumeController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature
// 0x0118 (0x0118 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F8)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature) == 0x000118, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature
// 0x0020 (0x0020 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature) == 0x000020, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature) == 0x000001, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature) == 0x000001, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature, Condition) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature::Condition' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.CalculateDistanceBetweenPlayerAndControlPoint
// 0x0050 (0x0050 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0010(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint) == 0x000050, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, ReturnValue) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, CallFunc_GetPlayerPawn_ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, CallFunc_Vector_Distance_ReturnValue) == 0x000040, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceBetweenPlayerAndControlPoint::CallFunc_IsValid_ReturnValue' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.CalculateDistanceRatio
// 0x0018 (0x0018 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateDistanceBetweenPlayerAndControlPoint_ReturnValue; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateRatioBasedOnDistance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio) == 0x000018, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio, ReturnValue) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio, CallFunc_CalculateDistanceBetweenPlayerAndControlPoint_ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio::CallFunc_CalculateDistanceBetweenPlayerAndControlPoint_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio, CallFunc_CalculateRatioBasedOnDistance_ReturnValue) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateDistanceRatio::CallFunc_CalculateRatioBasedOnDistance_ReturnValue' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.CalculateRatioBasedOnDistance
// 0x0038 (0x0038 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance final
{
public:
	double                                        Distance;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_ReturnValue;                // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_FunctionResult_ReturnValue_ImplicitCast;    // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetFloatValue_InTime_ImplicitCast;        // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance) == 0x000038, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, Distance) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::Distance' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, CallFunc_MapRangeClamped_ReturnValue) == 0x000018, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, CallFunc_GetFloatValue_ReturnValue) == 0x000020, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::CallFunc_GetFloatValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, K2Node_FunctionResult_ReturnValue_ImplicitCast) == 0x000028, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::K2Node_FunctionResult_ReturnValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance, CallFunc_GetFloatValue_InTime_ImplicitCast) == 0x000030, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateRatioBasedOnDistance::CallFunc_GetFloatValue_InTime_ImplicitCast' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.CalculateSoundVolumeToApply
// 0x0018 (0x0018 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply final
{
public:
	double                                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_CalculateDistanceRatio_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply) == 0x000018, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply, ReturnValue) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply, CallFunc_CalculateDistanceRatio_ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply::CallFunc_CalculateDistanceRatio_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply, CallFunc_MapRangeClamped_ReturnValue) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_CalculateSoundVolumeToApply::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController
// 0x0178 (0x0178 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent_1;  // 0x0010(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor_1;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp_1;            // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex_1;       // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x0030(0x00F8)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x0128(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x0138(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue_1;              // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0168(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_Condition;              // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_IsActive_Variable;                       // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController) == 0x000178, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, EntryPoint) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_Event_EndPlayReason) == 0x000004, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_Event_DeltaSeconds) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OverlappedComponent_1) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OverlappedComponent_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherActor_1) == 0x000018, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherActor_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherComp_1) == 0x000020, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherComp_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherBodyIndex_1) == 0x000028, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherBodyIndex_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_bFromSweep) == 0x00002C, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_SweepResult) == 0x000030, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x000128, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherActor) == 0x000130, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherComp) == 0x000138, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x000140, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_GetPlayerPawn_ReturnValue) == 0x000148, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000150, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_GetPlayerPawn_ReturnValue_1) == 0x000158, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_GetPlayerPawn_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000160, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_GetCustomGI_ReturnValue) == 0x000168, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, CallFunc_Not_PreBool_ReturnValue) == 0x000170, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, K2Node_ComponentBoundEvent_Condition) == 0x000171, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::K2Node_ComponentBoundEvent_Condition' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController, Temp_bool_IsActive_Variable) == 0x000172, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController::Temp_bool_IsActive_Variable' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.ReceiveTick
// 0x0004 (0x0004 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick) == 0x000004, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick) == 0x000004, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick, DeltaSeconds) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_ReceiveTick::DeltaSeconds' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.Update Sound Volume Diegetic
// 0x0018 (0x0018 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic final
{
public:
	double                                        CallFunc_CalculateSoundVolumeToApply_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AdjustVolume_AdjustVolumeLevel_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic) == 0x000018, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic, CallFunc_CalculateSoundVolumeToApply_ReturnValue) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic::CallFunc_CalculateSoundVolumeToApply_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic, CallFunc_AdjustVolume_AdjustVolumeLevel_ImplicitCast) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Diegetic::CallFunc_AdjustVolume_AdjustVolumeLevel_ImplicitCast' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.Update Sound Volume Exploration
// 0x0018 (0x0018 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration final
{
public:
	double                                        CallFunc_CalculateSoundVolumeToApply_ReturnValue;  // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBP_jRPG_GI_Custom_C*                   CallFunc_GetCustomGI_ReturnValue;                  // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_AdjustVolumeByContext_AdjustVolumeLevel_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration) == 0x000008, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration) == 0x000018, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration, CallFunc_CalculateSoundVolumeToApply_ReturnValue) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration::CallFunc_CalculateSoundVolumeToApply_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration, CallFunc_GetCustomGI_ReturnValue) == 0x000008, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration::CallFunc_GetCustomGI_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration, CallFunc_AdjustVolumeByContext_AdjustVolumeLevel_ImplicitCast) == 0x000010, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Sound_Volume_Exploration::CallFunc_AdjustVolumeByContext_AdjustVolumeLevel_ImplicitCast' has a wrong offset!");

// Function BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C.Update Trigger Collision
// 0x0005 (0x0005 - 0x0000)
struct BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GetCurrentConditionValue_CurrentValue;    // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ECollisionEnabled                             K2Node_Select_Default;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision) == 0x000001, "Wrong alignment on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision");
static_assert(sizeof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision) == 0x000005, "Wrong size on BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision, Temp_bool_Variable) == 0x000000, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision, Temp_byte_Variable) == 0x000001, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision, Temp_byte_Variable_1) == 0x000002, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision, CallFunc_GetCurrentConditionValue_CurrentValue) == 0x000003, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision::CallFunc_GetCurrentConditionValue_CurrentValue' has a wrong offset!");
static_assert(offsetof(BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision, K2Node_Select_Default) == 0x000004, "Member 'BP_Audio_DiegeticMusicWithVolumeController_C_Update_Trigger_Collision::K2Node_Select_Default' has a wrong offset!");

}

