#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueMechanic_TransformMasks_Component

#include "Basic.hpp"

#include "BP_UniqueMechanic_TransformMasks_Component_classes.hpp"
#include "BP_UniqueMechanic_TransformMasks_Component_parameters.hpp"


namespace SDK
{

// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.Achievement_HasCastOverchargeSkill
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBP_SkillState_C*                 SkillState                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::Achievement_HasCastOverchargeSkill(class UBP_SkillState_C* SkillState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "Achievement_HasCastOverchargeSkill");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_Achievement_HasCastOverchargeSkill Parms{};

	Parms.SkillState = SkillState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.Achievement_UnlockMonocoWheel
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UniqueMechanic_TransformMasks_Component_C::Achievement_UnlockMonocoWheel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "Achievement_UnlockMonocoWheel");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.AddMeter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MeterToAdd                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    UpdateUI_Instantly_                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBattleContext                          Reason                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::AddMeter(int32 MeterToAdd, bool UpdateUI_Instantly_, EBattleContext Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "AddMeter");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_AddMeter Parms{};

	Parms.MeterToAdd = MeterToAdd;
	Parms.UpdateUI_Instantly_ = UpdateUI_Instantly_;
	Parms.Reason = Reason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.AddMeterFromSkill
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ABP_Battle_SkillScript_C*         SkillScript                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::AddMeterFromSkill(class ABP_Battle_SkillScript_C* SkillScript)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "AddMeterFromSkill");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_AddMeterFromSkill Parms{};

	Parms.SkillScript = SkillScript;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.BuildInversedMaskMap
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<int32, E_Transform_Masks_Mechanic>&NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_UniqueMechanic_TransformMasks_Component_C::BuildInversedMaskMap(const TMap<int32, E_Transform_Masks_Mechanic>& NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "BuildInversedMaskMap");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_BuildInversedMaskMap Parms{};

	Parms.NewParam = std::move(NewParam);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.CreatePortraitWidget
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UUserWidget**                     CreatedUserWidget                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// int32*                                  SlotIndex                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::CreatePortraitWidget(class UUserWidget** CreatedUserWidget, int32* SlotIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "CreatePortraitWidget");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_CreatePortraitWidget Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CreatedUserWidget != nullptr)
		*CreatedUserWidget = Parms.CreatedUserWidget;

	if (SlotIndex != nullptr)
		*SlotIndex = Parms.SlotIndex;
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.ExecuteUbergraph_BP_UniqueMechanic_TransformMasks_Component
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::ExecuteUbergraph_BP_UniqueMechanic_TransformMasks_Component(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "ExecuteUbergraph_BP_UniqueMechanic_TransformMasks_Component");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_ExecuteUbergraph_BP_UniqueMechanic_TransformMasks_Component Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.GetMaskList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TArray<E_Transform_Masks_Mechanic>*     MaskList_0                                             (Parm, OutParm)

void UBP_UniqueMechanic_TransformMasks_Component_C::GetMaskList(TArray<E_Transform_Masks_Mechanic>* MaskList_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "GetMaskList");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_GetMaskList Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaskList_0 != nullptr)
		*MaskList_0 = std::move(Parms.MaskList_0);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.GetMaskMap
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// TMap<int32, E_Transform_Masks_Mechanic>*Mask_Map_0                                             (Parm, OutParm)

void UBP_UniqueMechanic_TransformMasks_Component_C::GetMaskMap(TMap<int32, E_Transform_Masks_Mechanic>* Mask_Map_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "GetMaskMap");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_GetMaskMap Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Mask_Map_0 != nullptr)
		*Mask_Map_0 = std::move(Parms.Mask_Map_0);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.GetMaxMeter
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  MaxMeter_0                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::GetMaxMeter(int32* MaxMeter_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "GetMaxMeter");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_GetMaxMeter Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (MaxMeter_0 != nullptr)
		*MaxMeter_0 = Parms.MaxMeter_0;
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.GetStartingPosition
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32*                                  StartingPosition                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::GetStartingPosition(int32* StartingPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "GetStartingPosition");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_GetStartingPosition Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (StartingPosition != nullptr)
		*StartingPosition = Parms.StartingPosition;
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OnTurnEnd
// (BlueprintCallable, BlueprintEvent)

void UBP_UniqueMechanic_TransformMasks_Component_C::OnTurnEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OnTurnEnd");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OnTurnStart
// (BlueprintCallable, BlueprintEvent)

void UBP_UniqueMechanic_TransformMasks_Component_C::OnTurnStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OnTurnStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OverrideAddMeter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::OverrideAddMeter(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OverrideAddMeter");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_OverrideAddMeter Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OverrideCurrentMask
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// E_Transform_Masks_Mechanic              NewMask                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::OverrideCurrentMask(E_Transform_Masks_Mechanic NewMask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OverrideCurrentMask");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_OverrideCurrentMask Parms{};

	Parms.NewMask = NewMask;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OverrideCurrentMeter
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewValue                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::OverrideCurrentMeter(int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OverrideCurrentMeter");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_OverrideCurrentMeter Parms{};

	Parms.NewValue = NewValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OverrideMaskList
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<E_Transform_Masks_Mechanic>&     NewMaskList                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)

void UBP_UniqueMechanic_TransformMasks_Component_C::OverrideMaskList(TArray<E_Transform_Masks_Mechanic>& NewMaskList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OverrideMaskList");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_OverrideMaskList Parms{};

	Parms.NewMaskList = std::move(NewMaskList);

	UObject::ProcessEvent(Func, &Parms);

	NewMaskList = std::move(Parms.NewMaskList);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.OverrideMaskMap
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const TMap<int32, E_Transform_Masks_Mechanic>&NewMaskMap                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void UBP_UniqueMechanic_TransformMasks_Component_C::OverrideMaskMap(const TMap<int32, E_Transform_Masks_Mechanic>& NewMaskMap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "OverrideMaskMap");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_OverrideMaskMap Parms{};

	Parms.NewMaskMap = std::move(NewMaskMap);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.ReceiveBeginPlay
// (Event, Public, BlueprintEvent)

void UBP_UniqueMechanic_TransformMasks_Component_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.ReceiveEndPlay
// (Event, Public, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_UniqueMechanic_TransformMasks_Component_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "ReceiveEndPlay");

	Params::BP_UniqueMechanic_TransformMasks_Component_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C.UpdateCurrentMask
// (Public, BlueprintCallable, BlueprintEvent)

void UBP_UniqueMechanic_TransformMasks_Component_C::UpdateCurrentMask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_UniqueMechanic_TransformMasks_Component_C", "UpdateCurrentMask");

	UObject::ProcessEvent(Func, nullptr);
}

}

