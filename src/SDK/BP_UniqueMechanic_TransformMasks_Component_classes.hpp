#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueMechanic_TransformMasks_Component

#include "Basic.hpp"

#include "EBattleContext_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_Transform_Masks_Mechanic_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UniqueMechanic_TransformMasks_Component.BP_UniqueMechanic_TransformMasks_Component_C
// 0x0138 (0x01D8 - 0x00A0)
class UBP_UniqueMechanic_TransformMasks_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	E_Transform_Masks_Mechanic                    CurrentMask;                                       // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentMeter;                                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWBP_UniqueMechanic_TransformMasks_C*   UI_Transform;                                      // 0x00B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       CharacterOwner;                                    // 0x00B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         Starting_Position;                                 // 0x00C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, E_Transform_Masks_Mechanic>       Mask_Map;                                          // 0x00C8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMap<E_Transform_Masks_Mechanic, int32>       Mask_Map_Inversed;                                 // 0x0118(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	int32                                         MaxMeter;                                          // 0x0168(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 MeterToAdd, EBattleContext Reason)> OnBeginAddMeter;         // 0x0170(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         MeterToAddOverride;                                // 0x0180(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(E_Transform_Masks_Mechanic PreviousMask, E_Transform_Masks_Mechanic NewMask, int32 NewMeter)> OnSetMask; // 0x0188(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class ABP_Battle_SkillScript_C* SkillScript, int32 AddMeter)> OnAddMeterFromSkill; // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<E_Transform_Masks_Mechanic>            MaskList;                                          // 0x01A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<E_Transform_Masks_Mechanic>            BaseMaskList;                                      // 0x01B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Achievement_ConsecutiveOverchargeAmount;           // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   Achievement_MonocoWheel;                           // 0x01CC(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Achievement_HasCastOverchargedSkillThisTurn;       // 0x01D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void Achievement_HasCastOverchargeSkill(class UBP_SkillState_C* SkillState);
	void Achievement_UnlockMonocoWheel();
	void AddMeter(int32 MeterToAdd, bool UpdateUI_Instantly_, EBattleContext Reason);
	void AddMeterFromSkill(class ABP_Battle_SkillScript_C* SkillScript);
	void BuildInversedMaskMap(const TMap<int32, E_Transform_Masks_Mechanic>& NewParam);
	void CreatePortraitWidget(class UUserWidget** CreatedUserWidget, int32* SlotIndex);
	void ExecuteUbergraph_BP_UniqueMechanic_TransformMasks_Component(int32 EntryPoint);
	void GetMaskList(TArray<E_Transform_Masks_Mechanic>* MaskList_0);
	void GetMaskMap(TMap<int32, E_Transform_Masks_Mechanic>* Mask_Map_0);
	void GetMaxMeter(int32* MaxMeter_0);
	void GetStartingPosition(int32* StartingPosition);
	void OnTurnEnd();
	void OnTurnStart();
	void OverrideAddMeter(int32 NewValue);
	void OverrideCurrentMask(E_Transform_Masks_Mechanic NewMask);
	void OverrideCurrentMeter(int32 NewValue);
	void OverrideMaskList(TArray<E_Transform_Masks_Mechanic>& NewMaskList);
	void OverrideMaskMap(const TMap<int32, E_Transform_Masks_Mechanic>& NewMaskMap);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void UpdateCurrentMask();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UniqueMechanic_TransformMasks_Component_C">();
	}
	static class UBP_UniqueMechanic_TransformMasks_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UniqueMechanic_TransformMasks_Component_C>();
	}
};
static_assert(alignof(UBP_UniqueMechanic_TransformMasks_Component_C) == 0x000008, "Wrong alignment on UBP_UniqueMechanic_TransformMasks_Component_C");
static_assert(sizeof(UBP_UniqueMechanic_TransformMasks_Component_C) == 0x0001D8, "Wrong size on UBP_UniqueMechanic_TransformMasks_Component_C");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, CurrentMask) == 0x0000A8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::CurrentMask' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, CurrentMeter) == 0x0000AC, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::CurrentMeter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, UI_Transform) == 0x0000B0, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::UI_Transform' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, CharacterOwner) == 0x0000B8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::CharacterOwner' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Starting_Position) == 0x0000C0, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Starting_Position' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Mask_Map) == 0x0000C8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Mask_Map' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Mask_Map_Inversed) == 0x000118, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Mask_Map_Inversed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, MaxMeter) == 0x000168, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::MaxMeter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, OnBeginAddMeter) == 0x000170, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::OnBeginAddMeter' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, MeterToAddOverride) == 0x000180, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::MeterToAddOverride' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, OnSetMask) == 0x000188, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::OnSetMask' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, OnAddMeterFromSkill) == 0x000198, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::OnAddMeterFromSkill' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, MaskList) == 0x0001A8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::MaskList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, BaseMaskList) == 0x0001B8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::BaseMaskList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Achievement_ConsecutiveOverchargeAmount) == 0x0001C8, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Achievement_ConsecutiveOverchargeAmount' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Achievement_MonocoWheel) == 0x0001CC, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Achievement_MonocoWheel' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_TransformMasks_Component_C, Achievement_HasCastOverchargedSkillThisTurn) == 0x0001D4, "Member 'UBP_UniqueMechanic_TransformMasks_Component_C::Achievement_HasCastOverchargedSkillThisTurn' has a wrong offset!");

}

