#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FluxOceanWave

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FluxOceanWave.BP_FluxOceanWave_C
// 0x0158 (0x03E8 - 0x0290)
class ABP_FluxOceanWave_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   DebugPlane;                                        // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialBillboardComponent*            MaterialBillboard;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          SurfaceMesh;                                       // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          UseRenderTarget;                                   // 0x02B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     GeneratorMaterial;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GeneratorInstance;                                 // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTextureRenderTarget2D*                 WaveTexture;                                       // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HighPrecision;                                     // 0x02D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureResolution;                                 // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PreviewAnimation;                                  // 0x02E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E1[0x7];                                      // 0x02E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     PreviewMaterial;                                   // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UVolumeTexture*                         OceanWaveAnimation;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveLength;                                   // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PreviewInstance;                                   // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveChoppiness;                               // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveHeight;                                   // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveOffset;                                   // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        UpdateFramerate;                                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	TSoftObjectPtr<class UStaticMesh>             DebugMesh;                                         // 0x0328(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash)
	class UChildActorComponent*                   Editor;                                            // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UPDA_FluxWaveProfile_C*                 WaveProfile;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        WaveProfileSize;                                   // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaveMovementSpeed;                                 // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaveAnimationSpeed;                                // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaveProfileAreaWidth;                              // 0x0378(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaveProfileAreaBlend;                              // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        WaveAnimationDistance;                             // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShoreGroundPrediction;                             // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ShoreColorDistance;                                // 0x0398(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	double                                        ShoreColorHeight;                                  // 0x03A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveRange;                                    // 0x03A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveFalloff;                                  // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              OceanWaveWindDirection;                            // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveWindPush;                                 // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TextureTransform;                                  // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        OceanWaveAnimationSpeed;                           // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateTexture(double Delta);
	void UpdateModifierMaterials(const TArray<class UMaterialInstanceDynamic*>& Materials, bool UseVelocityMap);
	void TogleDebugGround();
	void ToggleUpdateSimulation();
	void SetZLocation(double New_Location_Z, bool ApplyToSurface);
	void SetWaveTextureAndArea(class UTextureRenderTarget2D* Texture, const struct FLinearColor& Area);
	void SetWaveTexture();
	void SetWaveProfile(class UPDA_FluxWaveProfile_C* Profile);
	void SetNiagaraData(class UNiagaraComponent* System, bool RequreWave);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void OnEditorUpdateLoop();
	void OnEditorStopSimulation();
	void OnEditorShowSimulation();
	void OnEditorSelectionChanged(bool Selected);
	void OnEditorRestartSimulation();
	void OnEditorPostLoad();
	void OnEditorModifierChanged();
	void OnEditorIterateSimulation(int32 Iterations);
	void InitializeMaterials(bool ApplyToSurface);
	void InitializeGenerator();
	void InitializeEditor();
	void GetWaveTextureMaterials(TArray<class UMaterialInstanceDynamic*>* MaterialInstances);
	void ExecuteUbergraph_BP_FluxOceanWave(int32 EntryPoint);
	void CanRenderWave(bool* CanRender);
	void ApplyToSurfaces();

	void SetMaterialData(TArray<class UMaterialInstanceDynamic*>& Materials) const;
	double GetSurfaceHeight() const;
	void ExportWaveTexture() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FluxOceanWave_C">();
	}
	static class ABP_FluxOceanWave_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FluxOceanWave_C>();
	}
};
static_assert(alignof(ABP_FluxOceanWave_C) == 0x000008, "Wrong alignment on ABP_FluxOceanWave_C");
static_assert(sizeof(ABP_FluxOceanWave_C) == 0x0003E8, "Wrong size on ABP_FluxOceanWave_C");
static_assert(offsetof(ABP_FluxOceanWave_C, UberGraphFrame) == 0x000290, "Member 'ABP_FluxOceanWave_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, DebugPlane) == 0x000298, "Member 'ABP_FluxOceanWave_C::DebugPlane' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, MaterialBillboard) == 0x0002A0, "Member 'ABP_FluxOceanWave_C::MaterialBillboard' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, SurfaceMesh) == 0x0002A8, "Member 'ABP_FluxOceanWave_C::SurfaceMesh' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_FluxOceanWave_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, UseRenderTarget) == 0x0002B8, "Member 'ABP_FluxOceanWave_C::UseRenderTarget' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, GeneratorMaterial) == 0x0002C0, "Member 'ABP_FluxOceanWave_C::GeneratorMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, GeneratorInstance) == 0x0002C8, "Member 'ABP_FluxOceanWave_C::GeneratorInstance' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveTexture) == 0x0002D0, "Member 'ABP_FluxOceanWave_C::WaveTexture' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, HighPrecision) == 0x0002D8, "Member 'ABP_FluxOceanWave_C::HighPrecision' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, TextureResolution) == 0x0002DC, "Member 'ABP_FluxOceanWave_C::TextureResolution' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, PreviewAnimation) == 0x0002E0, "Member 'ABP_FluxOceanWave_C::PreviewAnimation' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, PreviewMaterial) == 0x0002E8, "Member 'ABP_FluxOceanWave_C::PreviewMaterial' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveAnimation) == 0x0002F0, "Member 'ABP_FluxOceanWave_C::OceanWaveAnimation' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveLength) == 0x0002F8, "Member 'ABP_FluxOceanWave_C::OceanWaveLength' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, PreviewInstance) == 0x000300, "Member 'ABP_FluxOceanWave_C::PreviewInstance' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveChoppiness) == 0x000308, "Member 'ABP_FluxOceanWave_C::OceanWaveChoppiness' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveHeight) == 0x000310, "Member 'ABP_FluxOceanWave_C::OceanWaveHeight' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveOffset) == 0x000318, "Member 'ABP_FluxOceanWave_C::OceanWaveOffset' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, UpdateFramerate) == 0x000320, "Member 'ABP_FluxOceanWave_C::UpdateFramerate' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, DebugMesh) == 0x000328, "Member 'ABP_FluxOceanWave_C::DebugMesh' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, Editor) == 0x000350, "Member 'ABP_FluxOceanWave_C::Editor' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveProfile) == 0x000358, "Member 'ABP_FluxOceanWave_C::WaveProfile' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveProfileSize) == 0x000360, "Member 'ABP_FluxOceanWave_C::WaveProfileSize' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveMovementSpeed) == 0x000368, "Member 'ABP_FluxOceanWave_C::WaveMovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveAnimationSpeed) == 0x000370, "Member 'ABP_FluxOceanWave_C::WaveAnimationSpeed' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveProfileAreaWidth) == 0x000378, "Member 'ABP_FluxOceanWave_C::WaveProfileAreaWidth' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveProfileAreaBlend) == 0x000380, "Member 'ABP_FluxOceanWave_C::WaveProfileAreaBlend' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, WaveAnimationDistance) == 0x000388, "Member 'ABP_FluxOceanWave_C::WaveAnimationDistance' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, ShoreGroundPrediction) == 0x000390, "Member 'ABP_FluxOceanWave_C::ShoreGroundPrediction' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, ShoreColorDistance) == 0x000398, "Member 'ABP_FluxOceanWave_C::ShoreColorDistance' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, ShoreColorHeight) == 0x0003A0, "Member 'ABP_FluxOceanWave_C::ShoreColorHeight' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveRange) == 0x0003A8, "Member 'ABP_FluxOceanWave_C::OceanWaveRange' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveFalloff) == 0x0003B0, "Member 'ABP_FluxOceanWave_C::OceanWaveFalloff' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveWindDirection) == 0x0003B8, "Member 'ABP_FluxOceanWave_C::OceanWaveWindDirection' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveWindPush) == 0x0003C8, "Member 'ABP_FluxOceanWave_C::OceanWaveWindPush' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, TextureTransform) == 0x0003D0, "Member 'ABP_FluxOceanWave_C::TextureTransform' has a wrong offset!");
static_assert(offsetof(ABP_FluxOceanWave_C, OceanWaveAnimationSpeed) == 0x0003E0, "Member 'ABP_FluxOceanWave_C::OceanWaveAnimationSpeed' has a wrong offset!");

}

