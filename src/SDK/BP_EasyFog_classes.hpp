#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_EasyFog

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_EasyFog.BP_EasyFog_C
// 0x0080 (0x0310 - 0x0290)
class ABP_EasyFog_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   FogCard;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Base_Color_Map;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Opacity_Map;                                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Normal_Map;                                        // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Fog_Material_Instance;                             // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Base_Color_Tint;                                   // 0x02C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         BaseColorContrast;                                 // 0x02D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Base_Color_Intensity;                              // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Emissive_Intensity;                                // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Normal_Map_Intensity;                              // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Fog_Density;                                       // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Geometry_Fading_Distance;                          // 0x02EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Camera_Fading_Distance;                            // 0x02F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	bool                                          Cast_Shadow_;                                      // 0x02F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F5[0x3];                                      // 0x02F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         No;                                                // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Speed_Y;                                      // 0x02FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Speed_X;                                      // 0x0300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         View_Angle_Fade;                                   // 0x0304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Noise_Tiling;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	float                                         Wind_Noise_Contrast;                               // 0x030C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void ReceiveBeginPlay();
	void ExecuteUbergraph_BP_EasyFog(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_EasyFog_C">();
	}
	static class ABP_EasyFog_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_EasyFog_C>();
	}
};
static_assert(alignof(ABP_EasyFog_C) == 0x000008, "Wrong alignment on ABP_EasyFog_C");
static_assert(sizeof(ABP_EasyFog_C) == 0x000310, "Wrong size on ABP_EasyFog_C");
static_assert(offsetof(ABP_EasyFog_C, UberGraphFrame) == 0x000290, "Member 'ABP_EasyFog_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, FogCard) == 0x000298, "Member 'ABP_EasyFog_C::FogCard' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_EasyFog_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Map) == 0x0002A8, "Member 'ABP_EasyFog_C::Base_Color_Map' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Opacity_Map) == 0x0002B0, "Member 'ABP_EasyFog_C::Opacity_Map' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Normal_Map) == 0x0002B8, "Member 'ABP_EasyFog_C::Normal_Map' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Fog_Material_Instance) == 0x0002C0, "Member 'ABP_EasyFog_C::Fog_Material_Instance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Tint) == 0x0002C8, "Member 'ABP_EasyFog_C::Base_Color_Tint' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, BaseColorContrast) == 0x0002D8, "Member 'ABP_EasyFog_C::BaseColorContrast' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Base_Color_Intensity) == 0x0002DC, "Member 'ABP_EasyFog_C::Base_Color_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Emissive_Intensity) == 0x0002E0, "Member 'ABP_EasyFog_C::Emissive_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Normal_Map_Intensity) == 0x0002E4, "Member 'ABP_EasyFog_C::Normal_Map_Intensity' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Fog_Density) == 0x0002E8, "Member 'ABP_EasyFog_C::Fog_Density' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Geometry_Fading_Distance) == 0x0002EC, "Member 'ABP_EasyFog_C::Geometry_Fading_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Camera_Fading_Distance) == 0x0002F0, "Member 'ABP_EasyFog_C::Camera_Fading_Distance' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Cast_Shadow_) == 0x0002F4, "Member 'ABP_EasyFog_C::Cast_Shadow_' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, No) == 0x0002F8, "Member 'ABP_EasyFog_C::No' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Speed_Y) == 0x0002FC, "Member 'ABP_EasyFog_C::Wind_Speed_Y' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Speed_X) == 0x000300, "Member 'ABP_EasyFog_C::Wind_Speed_X' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, View_Angle_Fade) == 0x000304, "Member 'ABP_EasyFog_C::View_Angle_Fade' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Noise_Tiling) == 0x000308, "Member 'ABP_EasyFog_C::Wind_Noise_Tiling' has a wrong offset!");
static_assert(offsetof(ABP_EasyFog_C, Wind_Noise_Contrast) == 0x00030C, "Member 'ABP_EasyFog_C::Wind_Noise_Contrast' has a wrong offset!");

}

