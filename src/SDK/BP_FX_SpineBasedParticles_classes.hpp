#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FX_SpineBasedParticles

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_FX_SpineBasedParticles.BP_FX_SpineBasedParticles_C
// 0x0050 (0x02E0 - 0x0290)
class ABP_FX_SpineBasedParticles_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNiagaraComponent*                      Niagara1;                                          // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      Niagara;                                           // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USplineComponent*                       Spline;                                            // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0To1_A12F606A497C898D4849DBAE578AB424;    // 0x02B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline__Direction_A12F606A497C898D4849DBAE578AB424; // 0x02BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2BD[0x3];                                      // 0x02BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline;                                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Speed;                                             // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Color;                                             // 0x02CC(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Radius;                                            // 0x02DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_FX_SpineBasedParticles(int32 EntryPoint);
	void ReceiveBeginPlay();
	void Timeline__FinishedFunc();
	void Timeline__UpdateFunc();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_FX_SpineBasedParticles_C">();
	}
	static class ABP_FX_SpineBasedParticles_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_FX_SpineBasedParticles_C>();
	}
};
static_assert(alignof(ABP_FX_SpineBasedParticles_C) == 0x000008, "Wrong alignment on ABP_FX_SpineBasedParticles_C");
static_assert(sizeof(ABP_FX_SpineBasedParticles_C) == 0x0002E0, "Wrong size on ABP_FX_SpineBasedParticles_C");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, UberGraphFrame) == 0x000290, "Member 'ABP_FX_SpineBasedParticles_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Niagara1) == 0x000298, "Member 'ABP_FX_SpineBasedParticles_C::Niagara1' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Niagara) == 0x0002A0, "Member 'ABP_FX_SpineBasedParticles_C::Niagara' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Spline) == 0x0002A8, "Member 'ABP_FX_SpineBasedParticles_C::Spline' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, DefaultSceneRoot) == 0x0002B0, "Member 'ABP_FX_SpineBasedParticles_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Timeline_0To1_A12F606A497C898D4849DBAE578AB424) == 0x0002B8, "Member 'ABP_FX_SpineBasedParticles_C::Timeline_0To1_A12F606A497C898D4849DBAE578AB424' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Timeline__Direction_A12F606A497C898D4849DBAE578AB424) == 0x0002BC, "Member 'ABP_FX_SpineBasedParticles_C::Timeline__Direction_A12F606A497C898D4849DBAE578AB424' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Timeline) == 0x0002C0, "Member 'ABP_FX_SpineBasedParticles_C::Timeline' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Speed) == 0x0002C8, "Member 'ABP_FX_SpineBasedParticles_C::Speed' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Color) == 0x0002CC, "Member 'ABP_FX_SpineBasedParticles_C::Color' has a wrong offset!");
static_assert(offsetof(ABP_FX_SpineBasedParticles_C, Radius) == 0x0002DC, "Member 'ABP_FX_SpineBasedParticles_C::Radius' has a wrong offset!");

}

