#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_TorchZone

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_jRPG_Character_World_Movement_Data_structs.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_TorchZone.BP_GPE_TorchZone_C
// 0x0060 (0x02F0 - 0x0290)
class ABP_GPE_TorchZone_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          Box_ZoneLimits;                                    // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TSoftObjectPtr<class AWindDirectionalSource>  WindActor;                                         // 0x02A8(0x0028)(Edit, BlueprintVisible, HasGetValueTypeHash)
	float                                         OriginalWindSpeed;                                 // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWindDirectionalSourceComponent*        WindComponent;                                     // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	struct FS_jRPG_Character_World_Movement_Data  CharacterWorldMovementData;                        // 0x02E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__FrostZone_Box_ZoneLimits_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__FrostZone_Box_ZoneLimits_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ExecuteUbergraph_BP_GPE_TorchZone(int32 EntryPoint);
	void OnPlayerEnteringTorchZone(class AActor* Actor);
	void OnPlayerExitingTorchZone(class AActor* Actor);
	void ReceiveBeginPlay();
	void ResetWindSpeed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_TorchZone_C">();
	}
	static class ABP_GPE_TorchZone_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_TorchZone_C>();
	}
};
static_assert(alignof(ABP_GPE_TorchZone_C) == 0x000008, "Wrong alignment on ABP_GPE_TorchZone_C");
static_assert(sizeof(ABP_GPE_TorchZone_C) == 0x0002F0, "Wrong size on ABP_GPE_TorchZone_C");
static_assert(offsetof(ABP_GPE_TorchZone_C, UberGraphFrame) == 0x000290, "Member 'ABP_GPE_TorchZone_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, Box_ZoneLimits) == 0x000298, "Member 'ABP_GPE_TorchZone_C::Box_ZoneLimits' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, DefaultSceneRoot) == 0x0002A0, "Member 'ABP_GPE_TorchZone_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, WindActor) == 0x0002A8, "Member 'ABP_GPE_TorchZone_C::WindActor' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, OriginalWindSpeed) == 0x0002D0, "Member 'ABP_GPE_TorchZone_C::OriginalWindSpeed' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, WindComponent) == 0x0002D8, "Member 'ABP_GPE_TorchZone_C::WindComponent' has a wrong offset!");
static_assert(offsetof(ABP_GPE_TorchZone_C, CharacterWorldMovementData) == 0x0002E0, "Member 'ABP_GPE_TorchZone_C::CharacterWorldMovementData' has a wrong offset!");

}

