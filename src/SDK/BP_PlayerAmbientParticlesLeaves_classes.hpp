#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerAmbientParticlesLeaves

#include "Basic.hpp"

#include "P_Leaves_Enum_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_PlayerAmbientParticles_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerAmbientParticlesLeaves.BP_PlayerAmbientParticlesLeaves_C
// 0x0040 (0x0368 - 0x0328)
class ABP_PlayerAmbientParticlesLeaves_C final : public ABP_PlayerAmbientParticles_C
{
public:
	class UArrowComponent*                        Arrow;                                             // 0x0328(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Current_Material;                                  // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	EP_Leaves_Enum                                Leaves_Type;                                       // 0x0338(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_339[0x7];                                      // 0x0339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     CustomMaterial;                                    // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               LeavesRotation;                                    // 0x0348(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         Dilation;                                          // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void SetLeavesMaterial();
	void SetDilation(double NewValue);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerAmbientParticlesLeaves_C">();
	}
	static class ABP_PlayerAmbientParticlesLeaves_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerAmbientParticlesLeaves_C>();
	}
};
static_assert(alignof(ABP_PlayerAmbientParticlesLeaves_C) == 0x000008, "Wrong alignment on ABP_PlayerAmbientParticlesLeaves_C");
static_assert(sizeof(ABP_PlayerAmbientParticlesLeaves_C) == 0x000368, "Wrong size on ABP_PlayerAmbientParticlesLeaves_C");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, Arrow) == 0x000328, "Member 'ABP_PlayerAmbientParticlesLeaves_C::Arrow' has a wrong offset!");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, Current_Material) == 0x000330, "Member 'ABP_PlayerAmbientParticlesLeaves_C::Current_Material' has a wrong offset!");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, Leaves_Type) == 0x000338, "Member 'ABP_PlayerAmbientParticlesLeaves_C::Leaves_Type' has a wrong offset!");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, CustomMaterial) == 0x000340, "Member 'ABP_PlayerAmbientParticlesLeaves_C::CustomMaterial' has a wrong offset!");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, LeavesRotation) == 0x000348, "Member 'ABP_PlayerAmbientParticlesLeaves_C::LeavesRotation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerAmbientParticlesLeaves_C, Dilation) == 0x000360, "Member 'ABP_PlayerAmbientParticlesLeaves_C::Dilation' has a wrong offset!");

}

