#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_RotatingMesh

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_RotatingMesh.BP_RotatingMesh_C
// 0x0048 (0x02D8 - 0x0290)
class ABP_RotatingMesh_C final : public AActor
{
public:
	class UStaticMeshComponent*                   StaticMesh1;                                       // 0x0290(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URotatingMovementComponent*             RotatingMovement;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMesh*                            MeshToRotate;                                      // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     Material;                                          // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               Rotation_Rate;                                     // 0x02C0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_RotatingMesh_C">();
	}
	static class ABP_RotatingMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_RotatingMesh_C>();
	}
};
static_assert(alignof(ABP_RotatingMesh_C) == 0x000008, "Wrong alignment on ABP_RotatingMesh_C");
static_assert(sizeof(ABP_RotatingMesh_C) == 0x0002D8, "Wrong size on ABP_RotatingMesh_C");
static_assert(offsetof(ABP_RotatingMesh_C, StaticMesh1) == 0x000290, "Member 'ABP_RotatingMesh_C::StaticMesh1' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, RotatingMovement) == 0x000298, "Member 'ABP_RotatingMesh_C::RotatingMovement' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, StaticMesh) == 0x0002A0, "Member 'ABP_RotatingMesh_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_RotatingMesh_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, MeshToRotate) == 0x0002B0, "Member 'ABP_RotatingMesh_C::MeshToRotate' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, Material) == 0x0002B8, "Member 'ABP_RotatingMesh_C::Material' has a wrong offset!");
static_assert(offsetof(ABP_RotatingMesh_C, Rotation_Rate) == 0x0002C0, "Member 'ABP_RotatingMesh_C::Rotation_Rate' has a wrong offset!");

}

