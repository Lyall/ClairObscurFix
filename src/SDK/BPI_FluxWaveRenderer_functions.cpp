#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_FluxWaveRenderer

#include "Basic.hpp"

#include "BPI_FluxWaveRenderer_classes.hpp"
#include "BPI_FluxWaveRenderer_parameters.hpp"


namespace SDK
{

// Function BPI_FluxWaveRenderer.BPI_FluxWaveRenderer_C.SetWaveTextureAndArea
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UTextureRenderTarget2D*           Texture                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// const struct FLinearColor&              Area                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxWaveRenderer_C::SetWaveTextureAndArea(class UTextureRenderTarget2D* Texture, const struct FLinearColor& Area)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FluxWaveRenderer_C", "SetWaveTextureAndArea");

	Params::BPI_FluxWaveRenderer_C_SetWaveTextureAndArea Parms{};

	Parms.Texture = Texture;
	Parms.Area = std::move(Area);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_FluxWaveRenderer.BPI_FluxWaveRenderer_C.SetWaveTexture
// (Public, BlueprintCallable, BlueprintEvent)

void IBPI_FluxWaveRenderer_C::SetWaveTexture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FluxWaveRenderer_C", "SetWaveTexture");

	AsUObject()->ProcessEvent(Func, nullptr);
}


// Function BPI_FluxWaveRenderer.BPI_FluxWaveRenderer_C.SetWaveProfile
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPDA_FluxWaveProfile_C*           Profile                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxWaveRenderer_C::SetWaveProfile(class UPDA_FluxWaveProfile_C* Profile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FluxWaveRenderer_C", "SetWaveProfile");

	Params::BPI_FluxWaveRenderer_C_SetWaveProfile Parms{};

	Parms.Profile = Profile;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_FluxWaveRenderer.BPI_FluxWaveRenderer_C.GetWaveTextureMaterials
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMaterialInstanceDynamic*>*MaterialInstances                                      (Parm, OutParm)

void IBPI_FluxWaveRenderer_C::GetWaveTextureMaterials(TArray<class UMaterialInstanceDynamic*>* MaterialInstances)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FluxWaveRenderer_C", "GetWaveTextureMaterials");

	Params::BPI_FluxWaveRenderer_C_GetWaveTextureMaterials Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (MaterialInstances != nullptr)
		*MaterialInstances = std::move(Parms.MaterialInstances);
}


// Function BPI_FluxWaveRenderer.BPI_FluxWaveRenderer_C.CanRenderWave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool*                                   CanRender                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_FluxWaveRenderer_C::CanRenderWave(bool* CanRender)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_FluxWaveRenderer_C", "CanRenderWave");

	Params::BPI_FluxWaveRenderer_C_CanRenderWave Parms{};

	AsUObject()->ProcessEvent(Func, &Parms);

	if (CanRender != nullptr)
		*CanRender = Parms.CanRender;
}

}

