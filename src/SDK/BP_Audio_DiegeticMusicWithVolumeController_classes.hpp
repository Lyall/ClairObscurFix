#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_DiegeticMusicWithVolumeController

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "E_InteractiveMusicContext_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_DiegeticMusicWithVolumeController.BP_Audio_DiegeticMusicWithVolumeController_C
// 0x0090 (0x0320 - 0x0290)
class ABP_Audio_DiegeticMusicWithVolumeController_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_ConditionCheckerComponent_C*        BP_ConditionCheckerComponent;                      // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        MusicSource;                                       // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          TriggerBox;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   ControlPoint;                                      // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        MinimumDistance;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MaximumDistance;                                   // 0x02C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VolumeAtMinimumDistance;                           // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VolumeAtMaximumDistance;                           // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            SmoothCurve;                                       // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	E_InteractiveMusicContext                     InteractiveMusicContext;                           // 0x02E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             DiegeticMusic;                                     // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        DiegeticMusicComponent;                            // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsPlaying;                                         // 0x0300(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastKnownPawnLocation;                             // 0x0308(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_Audio_Music_SphereDucker_TriggerBox_K2Node_ComponentBoundEvent_3_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void BndEvt__BP_AudioTriggerZone_BP_ConditionCheckerComponent_K2Node_ComponentBoundEvent_4_OnConditionChanged__DelegateSignature(bool Condition);
	double CalculateDistanceBetweenPlayerAndControlPoint();
	double CalculateDistanceRatio();
	double CalculateRatioBasedOnDistance(double Distance);
	double CalculateSoundVolumeToApply();
	void ExecuteUbergraph_BP_Audio_DiegeticMusicWithVolumeController(int32 EntryPoint);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveTick(float DeltaSeconds);
	void Update_Sound_Volume_Diegetic();
	void Update_Sound_Volume_Exploration();
	void Update_Trigger_Collision();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_DiegeticMusicWithVolumeController_C">();
	}
	static class ABP_Audio_DiegeticMusicWithVolumeController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Audio_DiegeticMusicWithVolumeController_C>();
	}
};
static_assert(alignof(ABP_Audio_DiegeticMusicWithVolumeController_C) == 0x000008, "Wrong alignment on ABP_Audio_DiegeticMusicWithVolumeController_C");
static_assert(sizeof(ABP_Audio_DiegeticMusicWithVolumeController_C) == 0x000320, "Wrong size on ABP_Audio_DiegeticMusicWithVolumeController_C");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, UberGraphFrame) == 0x000290, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, BP_ConditionCheckerComponent) == 0x000298, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::BP_ConditionCheckerComponent' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, MusicSource) == 0x0002A0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::MusicSource' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, TriggerBox) == 0x0002A8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::TriggerBox' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, ControlPoint) == 0x0002B0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::ControlPoint' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, DefaultSceneRoot) == 0x0002B8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, MinimumDistance) == 0x0002C0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::MinimumDistance' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, MaximumDistance) == 0x0002C8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::MaximumDistance' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, VolumeAtMinimumDistance) == 0x0002D0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::VolumeAtMinimumDistance' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, VolumeAtMaximumDistance) == 0x0002D8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::VolumeAtMaximumDistance' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, SmoothCurve) == 0x0002E0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::SmoothCurve' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, InteractiveMusicContext) == 0x0002E8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::InteractiveMusicContext' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, DiegeticMusic) == 0x0002F0, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::DiegeticMusic' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, DiegeticMusicComponent) == 0x0002F8, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::DiegeticMusicComponent' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, IsPlaying) == 0x000300, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::IsPlaying' has a wrong offset!");
static_assert(offsetof(ABP_Audio_DiegeticMusicWithVolumeController_C, LastKnownPawnLocation) == 0x000308, "Member 'ABP_Audio_DiegeticMusicWithVolumeController_C::LastKnownPawnLocation' has a wrong offset!");

}

