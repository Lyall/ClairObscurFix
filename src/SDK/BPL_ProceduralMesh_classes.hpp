#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_ProceduralMesh

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPL_ProceduralMesh.BPL_ProceduralMesh_C
// 0x0000 (0x0028 - 0x0028)
class UBPL_ProceduralMesh_C final : public UBlueprintFunctionLibrary
{
public:
	static void SplineTCoeff(double T1, class UObject* __WorldContext, double* WP1, double* WT1, double* WP2, double* WT2);
	static void SplineT(const struct FVector& A, const struct FVector& AT, const struct FVector& B, const struct FVector& BT, double T, class UObject* __WorldContext, struct FVector* R);
	static void SplineCoeff(double T, class UObject* __WorldContext, double* WP1, double* WT1, double* WP2, double* WT2);
	static void Spline(const struct FVector& A, const struct FVector& AT, const struct FVector& B, const struct FVector& BT, double T, class UObject* __WorldContext, struct FVector* R);
	static void QuadIndices(int32 I0, int32 I1, int32 I2, int32 I3, bool Swap, class UObject* __WorldContext, TArray<int32>* Array);
	static void PackIntToColor(int32 Value, class UObject* __WorldContext, double* R, double* G, double* B, double* A);
	static void Pack4Ints(int32 Value1, int32 Value2, int32 Value3, int32 Value4, class UObject* __WorldContext, int32* Bits);
	static void Pack3Ints(int32 Value1, int32 Value2, int32 Value3, class UObject* __WorldContext, int32* Bits);
	static void ModUVMapPlane(const struct FBS_MeshDefinition& InMesh, const struct FTransform& Transform, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModTransformUV(const struct FBS_MeshDefinition& InMesh, const struct FVector2D& Scale, const struct FVector2D& Move, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModTransform(const struct FBS_MeshDefinition& InMesh, const struct FTransform& Transform, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModQuad(const struct FBS_MeshDefinition& InMesh, const struct FVector& P1, const struct FVector& P2, const struct FVector& P3, const struct FVector& P4, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModExtrudeLine(const struct FBS_MeshDefinition& InMesh, double Width, bool GenerateUV, int32 Divisons, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModColor(const struct FBS_MeshDefinition& InMesh, const struct FLinearColor& NewColor, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void ModAppend(const struct FBS_MeshDefinition& InMeshA, struct FBS_MeshDefinition& InMeshB, class UObject* __WorldContext, struct FBS_MeshDefinition* OutMesh);
	static void LogStats(struct FBS_MeshDefinition& Mesh, bool PrintTriangles, bool PrintLocations, bool PrintColors, class UObject* __WorldContext);
	static void Lerp(const struct FVector2D& A, const struct FVector2D& B, double T, class UObject* __WorldContext, struct FVector2D* R);
	static void DrawDebugMesh(struct FBS_MeshDefinition& Mesh, class UObject* __WorldContext);
	static void CreateMeshSection(class UProceduralMeshComponent* Target, const struct FBS_MeshDefinition& MeshDefinition, int32 SectionIndex, bool bCreateCollision, class UObject* __WorldContext);
	static void BuildSplit(const struct FBS_MeshDefinition& Mesh, int32 LastIndex, class UObject* __WorldContext, struct FBS_MeshDefinition* MeshOut);
	static void BuildSplineBillboard(const struct FVector& StartPos, const struct FVector& EndPos, const struct FVector& StartTangent, const struct FVector& EndTangent, const struct FVector2D& StartUV, const struct FVector2D& EndUV, const struct FLinearColor& StartColor, const struct FLinearColor& EndColor, const struct FVector& Up, struct FBS_MeshDefinition& Triangles, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh);
	static void BuildRemove(const struct FBS_MeshDefinition& Mesh, TArray<bool>& RemoeIndex, class UObject* __WorldContext, struct FBS_MeshDefinition* MeshOut);
	static void BuildQuad(const struct FVector& v1, const struct FVector& v2, const struct FVector& V3, const struct FVector& V4, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh);
	static void BuildPlane(const struct FVector2D& Size, int32 Width, int32 Height, const struct FVector& Normal, const struct FVector2D& Offset, int32 SwapMode, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh);
	static void BuildLine(int32 Divisions, class UObject* __WorldContext, struct FBS_MeshDefinition* Mesh);
	static void BuildEmpty(class UObject* __WorldContext, struct FBS_MeshDefinition* BS_MeshDefinition);
	static void BuildCopy(const struct FBS_MeshDefinition& Mesh, class UObject* __WorldContext, struct FBS_MeshDefinition* Copy);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPL_ProceduralMesh_C">();
	}
	static class UBPL_ProceduralMesh_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPL_ProceduralMesh_C>();
	}
};
static_assert(alignof(UBPL_ProceduralMesh_C) == 0x000008, "Wrong alignment on UBPL_ProceduralMesh_C");
static_assert(sizeof(UBPL_ProceduralMesh_C) == 0x000028, "Wrong size on UBPL_ProceduralMesh_C");

}

