#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_UniqueMechanic_Foretell_Component

#include "Basic.hpp"

#include "SandFall_structs.hpp"
#include "EBattleContext_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "E_UniqueMechanic_Foretell_CardType_structs.hpp"
#include "E_UniqueMechanic_Foretell_SkillType_structs.hpp"
#include "E_UniqueMechanic_Foretell_ChargeType_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_UniqueMechanic_Foretell_Component.BP_UniqueMechanic_Foretell_Component_C
// 0x0400 (0x04A0 - 0x00A0)
class UBP_UniqueMechanic_Foretell_Component_C final : public UActorComponent
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x00A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	TMap<class UAC_jRPG_CharacterBattleStats_C*, int32> ForetellCounts;                              // 0x00A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UWBP_UniqueMechanic_Foretell_C*         ForetellCardsUI;                                   // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            PreviousCard;                                      // 0x0100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            CurrentCard;                                       // 0x0101(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_SkillType           CastSkillType;                                     // 0x0102(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_0FT;                                          // 0x0103(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_1FT;                                          // 0x0104(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_2FT;                                          // 0x0105(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_3FT;                                          // 0x0106(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_4FT;                                          // 0x0107(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_5FT;                                          // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_UniqueMechanic_Foretell_CardType            Card_Only_0;                                       // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10A[0x2];                                      // 0x010A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ForetellApplyMultiplier;                           // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ForetellConsumeMultiplier;                         // 0x0110(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_jRPG_Character_Battle_Base_C*       CharacterOwner;                                    // 0x0118(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TMap<class ABP_jRPG_Character_Battle_Base_C*, class UBP_FXForetellList_C*> MapEnemyList;         // 0x0120(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         MaxForetellOnSingleEnemy;                          // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ForetellStateColor;                                // 0x0174(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ForetellStateEmissiveColor;                        // 0x0184(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_194[0x4];                                      // 0x0194(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<E_UniqueMechanic_Foretell_CardType>    WeightedCards;                                     // 0x0198(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	E_UniqueMechanic_Foretell_CardType            OverrideCard;                                      // 0x01A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A9[0x7];                                      // 0x01A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FTimerHandle, class UNiagaraComponent*> ForetellMarkForDestruction;                  // 0x01B0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMulticastInlineDelegate<void(int32 PreviousForetell, int32 AddedForetell, class UAC_jRPG_CharacterBattleStats_C* TargetStats, EBattleContext Reason)> OnForetellApplied; // 0x0200(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(class UAC_jRPG_CharacterBattleStats_C* TargetStats, int32 PreviousForetell, int32 ForetellConsumed, EBattleContext Reason)> OnForetellConsumed; // 0x0210(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void(E_UniqueMechanic_Foretell_CardType PreviousCard, E_UniqueMechanic_Foretell_CardType NewCard)> OnCardChanged; // 0x0220(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, Deprecated, BlueprintCallable)
	TMap<class UAC_jRPG_CharacterBattleStats_C*, class UAC_jRPG_CharacterBattleStats_C*> OverrideTarget; // 0x0230(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<E_UniqueMechanic_Foretell_CardType, int32> OverrideMap;                                     // 0x0280(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	TMulticastInlineDelegate<void(int32 ForetellAmount)> OnGatheredForetell;                         // 0x02D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<E_UniqueMechanic_Foretell_ChargeType, int32> Charges;                                       // 0x02E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(E_UniqueMechanic_Foretell_ChargeType ChargeType, int32 NewValue, int32 PreviousValue, EBattleContext Reason)> OnChargeChanged; // 0x0330(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TArray<class UBP_BattleBuffInstance_C*>       ChargeBuffInstances;                               // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMulticastInlineDelegate<void(const TMap<E_UniqueMechanic_Foretell_ChargeType, int32>& ChargeState)> OnTwilightEngaged; // 0x0350(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMulticastInlineDelegate<void()>              OnTwilightDisabled;                                // 0x0360(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	bool                                          CanCreateChargeFromForetellThisTurn;               // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<E_UniqueMechanic_Foretell_ChargeType, int32> ChargesToFlush;                                // 0x0378(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         SunAPGainMultiplier;                               // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         MoonAPGainMultiplier;                              // 0x03CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMulticastInlineDelegate<void(class UBP_BattleEvent_ForetellChargeChange_C* ChargeChangeEvent)> OnProcessChargeChange; // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	TMap<struct FGuid, int32>                     TwilightDurationModifiers;                         // 0x03E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	TMap<struct FGuid, int32>                     TwilightExtraDamagePercents;                       // 0x0430(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Deprecated)
	int32                                         CurrentTwilightDuration;                           // 0x0480(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentTwilighDamageBonusPercent;                  // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSF_ModifierStackWrapper               TwilightExtraDamagePercentStack;                   // 0x0488(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)
	struct FSF_ModifierStackWrapper               TwilightBonusDurationStack;                        // 0x0490(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, ContainsInstancedReference)
	int32                                         TwilightMaxForetellMultiplier;                     // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AddChargeInternal(const E_UniqueMechanic_Foretell_ChargeType ChargeType, int32 ChargeCount, EBattleContext Reason);
	void AddMoonCharges(int32 ChargeCount, bool FlushImmediately, EBattleContext Reason);
	void AddSunCharges(int32 ChargeCount, bool FlushImmediately, EBattleContext Reason);
	void AddTwilightDurationModifier(int32 Delta, const class FString& DebugName, struct FSF_ModifierStackEntryHandle* ModifierHandle);
	void AddTwilightExtraDamagePercent(int32 DeltaPercent, const class FString& DebugName, struct FSF_ModifierStackEntryHandle* ModifierStackHandle);
	void ApplyForetell(class UAC_jRPG_CharacterBattleStats_C* Target, int32 MaxCount, EBattleContext Reason, bool FlushChargesImmediately);
	void ApplyForetellFX(int32 NumberToApply, class ABP_jRPG_Character_Battle_Base_C* Targets);
	void BPI_OnAnyCharacterAP_Changed(class UBP_BattleEvent_APChange_C* AP_Change);
	void BPI_OnAnyCharacterDamaged(class UBP_BattleDamages_C* BattleDamage);
	void BPI_OnBattleStart();
	void BPI_OnReserveTeamSent();
	void CancelForetellTargetOverride(class UAC_jRPG_CharacterBattleStats_C* InitialTargetStats);
	void Card_ApplyBuff();
	void ClearOverrideCardMap();
	void ConsumeForetell(class UAC_jRPG_CharacterBattleStats_C* Target, int32 MaxCount, EBattleContext Reason, bool FlushChargesImmediately, int32* ConsumedStacks);
	void ConsumeForetellFX(int32 NumberToConsume, const class ABP_jRPG_Character_Battle_Base_C* Targets);
	void CreatePortraitWidget(class UUserWidget** CreatedUserWidget, int32* SlotIndex);
	void DisableTwilightMode();
	void ExecuteUbergraph_BP_UniqueMechanic_Foretell_Component(int32 EntryPoint);
	void FlushQueuedCharges(EBattleContext Reason);
	void GatherNumberOfForetell(int32* ForetellNumber);
	void GetActiveTwilightTurnsLeft(int32* TurnDuration);
	void GetBonusTwilightDuration(class UModifierStack_Float** Stack);
	int32 GetChargeCount(const E_UniqueMechanic_Foretell_ChargeType ChargeType);
	int32 GetCurrentMaxForetellCount();
	int32 GetForetellCountOnCharacter(class ABP_jRPG_Character_Battle_Base_C* Target);
	int32 GetForetellCountOnCharacterStats(class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	int32 GetMoonAPGainMultiplier();
	void GetOrCreateListFX(class ABP_jRPG_Character_Battle_Base_C* Enemy, class UBP_FXForetellList_C** List);
	int32 GetSunAPGainMultiplier();
	double GetTwilightDamageBonusForChargeCount(int32 ChargeCount);
	double GetTwilightDamageBonusPerCharge();
	int32 GetTwilightDuration();
	void GetTwilightExtraDamagePercent(class UModifierStack_Float** Stack);
	bool HasCharges(const TMap<E_UniqueMechanic_Foretell_ChargeType, int32>& Charges_0);
	bool HasTwilightModeExpired();
	bool IsInTwilightMode();
	void IsTurnStartInProgress(bool* InProgress);
	void MarkFXForDestruction(class UNiagaraComponent* NiagaraSystem);
	void OnBattleStop();
	void OnCharacterDealtDamages(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, double Damages, double* ProcessedDamages);
	void OnCharacterKilled(class UAC_jRPG_CharacterBattleStats_C* CharacterStats);
	void OnCharacterReceivedDamages(class UAC_jRPG_CharacterBattleStats_C* TargetCharacter, class UAC_jRPG_CharacterBattleStats_C* SourceCharacter, double ReceivedDamages, class UBP_BattleDamages_C* BattleDamages);
	void OnCharacterResurrected();
	void OnCharacterTurnStart(class UAC_jRPG_CharacterBattleStats_C* CharacterStats, const class UBP_DependencyRefCounter_C*& TurnStartDependencies);
	void OnSuccessfulDodge();
	void OnSuccessfulParry();
	void OnTimerElapsed();
	void OnTurnEnd();
	void OnTurnStart();
	void OverrideCardEnd();
	void OverrideCardMap(const TMap<E_UniqueMechanic_Foretell_CardType, int32>& NewCardMap);
	void OverrideForetellTarget(class UAC_jRPG_CharacterBattleStats_C* InitialTargetStats, class UAC_jRPG_CharacterBattleStats_C* NewTargetStats);
	void OverrideNextTurnCard();
	void ProcessAddBuffAction(const class UAction_AddBuff_C*& BuffAddAction);
	void QueueCharges(E_UniqueMechanic_Foretell_ChargeType ChargeType, const int32& Count);
	void ReceiveBeginPlay();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void RemoveChargeBuffs();
	void RemoveTwilightDurationModifier(struct FSF_ModifierStackEntryHandle& OutModifierHandle);
	void RemoveTwilightExtraDamagePercent(struct FSF_ModifierStackEntryHandle& ModifierHandle_);
	void SetAllChargesInternal(const TMap<E_UniqueMechanic_Foretell_ChargeType, int32>& AllCharges);
	void SetChargeCountInternal(const E_UniqueMechanic_Foretell_ChargeType ChargeType, int32 ChargeCount, EBattleContext Reason);
	void SetMoonAPGainMultiplier(int32 NewSunAPGainMultiplier);
	void SetSunAPGainMultiplier(int32 NewSunAPGainMultiplier);
	bool ShouldTriggerTwilight();
	void TryAddChargeTypeInternal(const E_UniqueMechanic_Foretell_ChargeType ChargeType, int32 ChargeCount, bool FlushImmediately, EBattleContext Reason);
	void TryChangeActiveTwilightModeDuration(int32 DeltaTurns);
	void TryConsumeCharges(const TMap<E_UniqueMechanic_Foretell_ChargeType, int32>& ChargesToConsume, bool* Success);
	void TryEngageTwilightMode(bool* Success);
	void TryRemoveUniqueMechanicWidget();
	void TryUnlockAchievementScielForetell(int32 ConsumedForetell);
	void UpdateCardColor();
	void UpdateChargeBuffs();
	void UpdateForetellCardsMap(int32 Number_of_Foretell);
	void UpdateTwilightChargeDamagePercentModifier();
	void UpdateTwilightDuration();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_UniqueMechanic_Foretell_Component_C">();
	}
	static class UBP_UniqueMechanic_Foretell_Component_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_UniqueMechanic_Foretell_Component_C>();
	}
};
static_assert(alignof(UBP_UniqueMechanic_Foretell_Component_C) == 0x000008, "Wrong alignment on UBP_UniqueMechanic_Foretell_Component_C");
static_assert(sizeof(UBP_UniqueMechanic_Foretell_Component_C) == 0x0004A0, "Wrong size on UBP_UniqueMechanic_Foretell_Component_C");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, UberGraphFrame) == 0x0000A0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellCounts) == 0x0000A8, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellCounts' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellCardsUI) == 0x0000F8, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellCardsUI' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, PreviousCard) == 0x000100, "Member 'UBP_UniqueMechanic_Foretell_Component_C::PreviousCard' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CurrentCard) == 0x000101, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CurrentCard' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CastSkillType) == 0x000102, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CastSkillType' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_0FT) == 0x000103, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_0FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_1FT) == 0x000104, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_1FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_2FT) == 0x000105, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_2FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_3FT) == 0x000106, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_3FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_4FT) == 0x000107, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_4FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_5FT) == 0x000108, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_5FT' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Card_Only_0) == 0x000109, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Card_Only_0' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellApplyMultiplier) == 0x00010C, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellApplyMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellConsumeMultiplier) == 0x000110, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellConsumeMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CharacterOwner) == 0x000118, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CharacterOwner' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, MapEnemyList) == 0x000120, "Member 'UBP_UniqueMechanic_Foretell_Component_C::MapEnemyList' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, MaxForetellOnSingleEnemy) == 0x000170, "Member 'UBP_UniqueMechanic_Foretell_Component_C::MaxForetellOnSingleEnemy' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellStateColor) == 0x000174, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellStateColor' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellStateEmissiveColor) == 0x000184, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellStateEmissiveColor' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, WeightedCards) == 0x000198, "Member 'UBP_UniqueMechanic_Foretell_Component_C::WeightedCards' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OverrideCard) == 0x0001A8, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OverrideCard' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ForetellMarkForDestruction) == 0x0001B0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ForetellMarkForDestruction' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnForetellApplied) == 0x000200, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnForetellApplied' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnForetellConsumed) == 0x000210, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnForetellConsumed' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnCardChanged) == 0x000220, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnCardChanged' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OverrideTarget) == 0x000230, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OverrideTarget' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OverrideMap) == 0x000280, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OverrideMap' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnGatheredForetell) == 0x0002D0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnGatheredForetell' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, Charges) == 0x0002E0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::Charges' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnChargeChanged) == 0x000330, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnChargeChanged' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ChargeBuffInstances) == 0x000340, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ChargeBuffInstances' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnTwilightEngaged) == 0x000350, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnTwilightEngaged' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnTwilightDisabled) == 0x000360, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnTwilightDisabled' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CanCreateChargeFromForetellThisTurn) == 0x000370, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CanCreateChargeFromForetellThisTurn' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, ChargesToFlush) == 0x000378, "Member 'UBP_UniqueMechanic_Foretell_Component_C::ChargesToFlush' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, SunAPGainMultiplier) == 0x0003C8, "Member 'UBP_UniqueMechanic_Foretell_Component_C::SunAPGainMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, MoonAPGainMultiplier) == 0x0003CC, "Member 'UBP_UniqueMechanic_Foretell_Component_C::MoonAPGainMultiplier' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, OnProcessChargeChange) == 0x0003D0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::OnProcessChargeChange' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, TwilightDurationModifiers) == 0x0003E0, "Member 'UBP_UniqueMechanic_Foretell_Component_C::TwilightDurationModifiers' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, TwilightExtraDamagePercents) == 0x000430, "Member 'UBP_UniqueMechanic_Foretell_Component_C::TwilightExtraDamagePercents' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CurrentTwilightDuration) == 0x000480, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CurrentTwilightDuration' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, CurrentTwilighDamageBonusPercent) == 0x000484, "Member 'UBP_UniqueMechanic_Foretell_Component_C::CurrentTwilighDamageBonusPercent' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, TwilightExtraDamagePercentStack) == 0x000488, "Member 'UBP_UniqueMechanic_Foretell_Component_C::TwilightExtraDamagePercentStack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, TwilightBonusDurationStack) == 0x000490, "Member 'UBP_UniqueMechanic_Foretell_Component_C::TwilightBonusDurationStack' has a wrong offset!");
static_assert(offsetof(UBP_UniqueMechanic_Foretell_Component_C, TwilightMaxForetellMultiplier) == 0x000498, "Member 'UBP_UniqueMechanic_Foretell_Component_C::TwilightMaxForetellMultiplier' has a wrong offset!");

}

