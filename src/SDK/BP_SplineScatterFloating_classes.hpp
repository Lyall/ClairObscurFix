#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SplineScatterFloating

#include "Basic.hpp"

#include "S_SplineInstancesInfos_structs.hpp"
#include "SandFall_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "S_LA_SplineScatter_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SplineScatterFloating.BP_SplineScatterFloating_C
// 0x0450 (0x06E0 - 0x0290)
class ABP_SplineScatterFloating_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USplineComponent*                       Spline1;                                           // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        Spacing;                                           // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Random_Mesh;                                       // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FRandomStream                          Seed;                                              // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor)
	TArray<struct FS_LA_SplineScatter>            ScatterSettingsList_Expanded;                      // 0x02B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UStaticMesh*>                    List_Mesh;                                         // 0x02C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	double                                        Min_Roll;                                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Roll;                                          // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Pitch;                                         // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Pitch;                                         // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Min_Yaw;                                           // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Max_Yaw;                                           // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class UStaticMeshComponent*>           Array_Static_Mesh_Compo;                           // 0x0308(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        Distance_Floating;                                 // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_LA_SplineScatter>            List_S_Mesh;                                       // 0x0320(0x0010)(Edit, BlueprintVisible)
	TArray<int32>                                 Remap_Array;                                       // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Rotator_Speed;                                     // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<double>                                Moving_Distance;                                   // 0x0350(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Random_Vector_Location;                            // 0x0360(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FVector>                        Random_Vector_Speed;                               // 0x0370(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<struct FRotator>                       Random_Vector_Rotation;                            // 0x0380(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<int32>                                 Scale_scatter;                                     // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Seed_Scatter;                                      // 0x03A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsRotating;                                        // 0x03A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsCastingShadow;                                   // 0x03A5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3A6[0x2];                                      // 0x03A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstanceCount;                                     // 0x03A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3AC[0x4];                                      // 0x03AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInstancedStaticMeshComponent*>  ArrayOfInstancedStaticMeshComponents;              // 0x03B0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          IsClose;                                           // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C1[0x3];                                      // 0x03C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ActualInstanceCounter;                             // 0x03C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FS_SplineInstancesInfos>        ArrayStructInstancesInfos;                         // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UStaticMesh*, class UInstancedStaticMeshComponent*> dictionary;                       // 0x03D8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	double                                        BoundsScale;                                       // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FS_SplineInstancesInfos                Struct_Instances_Infos;                            // 0x0430(0x0058)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, HasGetValueTypeHash)
	double                                        DistanceChangeTicking;                             // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class UInstancedStaticMeshComponent*, double> ScalingPerInstance;                           // 0x0490(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UInstancedStaticMeshComponent*, double> DistancePerInstance;                          // 0x04E0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UInstancedStaticMeshComponent*, double> RotatorSpeedPerInstance;                      // 0x0530(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UInstancedStaticMeshComponent*, double> MovingDistancePerInstance;                    // 0x0580(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UInstancedStaticMeshComponent*, double> MinScalePerInstance;                          // 0x05D0(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UInstancedStaticMeshComponent*, double> MaxScalePerInstance;                          // 0x0620(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TMap<class UStaticMesh*, double>              ScalingPerMesh;                                    // 0x0670(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         Start_Cull_Distance;                               // 0x06C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         End_Cull_Distance;                                 // 0x06C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<struct FSplineFloatingInstancesData>   SplineInstanceOptimizedData;                       // 0x06C8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	bool                                          CollisionsStaticOnly;                              // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	bool Use_Actor_Collisions_for_Static();
	struct FTransform TransformForInstances(const int32& Seed_0, int32 Index_0, double Spacing_0, class UInstancedStaticMeshComponent* Instance_picked);
	void ReceiveTick(float DeltaSeconds);
	void ReceiveBeginPlay();
	void How_Many_Instances_Is_There();
	void GenerateMeshInstances();
	void Generate_Instances_Infos(struct FVector* Location, struct FVector* Speed, struct FRotator* Rotation);
	void ExecuteUbergraph_BP_SplineScatterFloating(int32 EntryPoint);
	void CheckPlayerDistance(bool* IsClose_0);
	bool CheckForErrors(TArray<class FText>& ErrorMessages);
	void ChangeTickRate(bool Condition);
	void Button_New_Seed();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SplineScatterFloating_C">();
	}
	static class ABP_SplineScatterFloating_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SplineScatterFloating_C>();
	}
};
static_assert(alignof(ABP_SplineScatterFloating_C) == 0x000008, "Wrong alignment on ABP_SplineScatterFloating_C");
static_assert(sizeof(ABP_SplineScatterFloating_C) == 0x0006E0, "Wrong size on ABP_SplineScatterFloating_C");
static_assert(offsetof(ABP_SplineScatterFloating_C, UberGraphFrame) == 0x000290, "Member 'ABP_SplineScatterFloating_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Spline1) == 0x000298, "Member 'ABP_SplineScatterFloating_C::Spline1' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Spacing) == 0x0002A0, "Member 'ABP_SplineScatterFloating_C::Spacing' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Random_Mesh) == 0x0002A8, "Member 'ABP_SplineScatterFloating_C::Random_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Seed) == 0x0002B0, "Member 'ABP_SplineScatterFloating_C::Seed' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ScatterSettingsList_Expanded) == 0x0002B8, "Member 'ABP_SplineScatterFloating_C::ScatterSettingsList_Expanded' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, List_Mesh) == 0x0002C8, "Member 'ABP_SplineScatterFloating_C::List_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Min_Roll) == 0x0002D8, "Member 'ABP_SplineScatterFloating_C::Min_Roll' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Max_Roll) == 0x0002E0, "Member 'ABP_SplineScatterFloating_C::Max_Roll' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Min_Pitch) == 0x0002E8, "Member 'ABP_SplineScatterFloating_C::Min_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Max_Pitch) == 0x0002F0, "Member 'ABP_SplineScatterFloating_C::Max_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Min_Yaw) == 0x0002F8, "Member 'ABP_SplineScatterFloating_C::Min_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Max_Yaw) == 0x000300, "Member 'ABP_SplineScatterFloating_C::Max_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Array_Static_Mesh_Compo) == 0x000308, "Member 'ABP_SplineScatterFloating_C::Array_Static_Mesh_Compo' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Distance_Floating) == 0x000318, "Member 'ABP_SplineScatterFloating_C::Distance_Floating' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, List_S_Mesh) == 0x000320, "Member 'ABP_SplineScatterFloating_C::List_S_Mesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Remap_Array) == 0x000330, "Member 'ABP_SplineScatterFloating_C::Remap_Array' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Rotator_Speed) == 0x000340, "Member 'ABP_SplineScatterFloating_C::Rotator_Speed' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Moving_Distance) == 0x000350, "Member 'ABP_SplineScatterFloating_C::Moving_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Random_Vector_Location) == 0x000360, "Member 'ABP_SplineScatterFloating_C::Random_Vector_Location' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Random_Vector_Speed) == 0x000370, "Member 'ABP_SplineScatterFloating_C::Random_Vector_Speed' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Random_Vector_Rotation) == 0x000380, "Member 'ABP_SplineScatterFloating_C::Random_Vector_Rotation' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Scale_scatter) == 0x000390, "Member 'ABP_SplineScatterFloating_C::Scale_scatter' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Seed_Scatter) == 0x0003A0, "Member 'ABP_SplineScatterFloating_C::Seed_Scatter' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, IsRotating) == 0x0003A4, "Member 'ABP_SplineScatterFloating_C::IsRotating' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, IsCastingShadow) == 0x0003A5, "Member 'ABP_SplineScatterFloating_C::IsCastingShadow' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, InstanceCount) == 0x0003A8, "Member 'ABP_SplineScatterFloating_C::InstanceCount' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ArrayOfInstancedStaticMeshComponents) == 0x0003B0, "Member 'ABP_SplineScatterFloating_C::ArrayOfInstancedStaticMeshComponents' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, IsClose) == 0x0003C0, "Member 'ABP_SplineScatterFloating_C::IsClose' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ActualInstanceCounter) == 0x0003C4, "Member 'ABP_SplineScatterFloating_C::ActualInstanceCounter' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ArrayStructInstancesInfos) == 0x0003C8, "Member 'ABP_SplineScatterFloating_C::ArrayStructInstancesInfos' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, dictionary) == 0x0003D8, "Member 'ABP_SplineScatterFloating_C::dictionary' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, BoundsScale) == 0x000428, "Member 'ABP_SplineScatterFloating_C::BoundsScale' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Struct_Instances_Infos) == 0x000430, "Member 'ABP_SplineScatterFloating_C::Struct_Instances_Infos' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, DistanceChangeTicking) == 0x000488, "Member 'ABP_SplineScatterFloating_C::DistanceChangeTicking' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ScalingPerInstance) == 0x000490, "Member 'ABP_SplineScatterFloating_C::ScalingPerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, DistancePerInstance) == 0x0004E0, "Member 'ABP_SplineScatterFloating_C::DistancePerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, RotatorSpeedPerInstance) == 0x000530, "Member 'ABP_SplineScatterFloating_C::RotatorSpeedPerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, MovingDistancePerInstance) == 0x000580, "Member 'ABP_SplineScatterFloating_C::MovingDistancePerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, MinScalePerInstance) == 0x0005D0, "Member 'ABP_SplineScatterFloating_C::MinScalePerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, MaxScalePerInstance) == 0x000620, "Member 'ABP_SplineScatterFloating_C::MaxScalePerInstance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, ScalingPerMesh) == 0x000670, "Member 'ABP_SplineScatterFloating_C::ScalingPerMesh' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, Start_Cull_Distance) == 0x0006C0, "Member 'ABP_SplineScatterFloating_C::Start_Cull_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, End_Cull_Distance) == 0x0006C4, "Member 'ABP_SplineScatterFloating_C::End_Cull_Distance' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, SplineInstanceOptimizedData) == 0x0006C8, "Member 'ABP_SplineScatterFloating_C::SplineInstanceOptimizedData' has a wrong offset!");
static_assert(offsetof(ABP_SplineScatterFloating_C, CollisionsStaticOnly) == 0x0006D8, "Member 'ABP_SplineScatterFloating_C::CollisionsStaticOnly' has a wrong offset!");

}

