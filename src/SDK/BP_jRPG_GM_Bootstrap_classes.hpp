#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_jRPG_GM_Bootstrap

#include "Basic.hpp"

#include "SandFall_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_jRPG_GM_Bootstrap.BP_jRPG_GM_Bootstrap_C
// 0x0020 (0x0348 - 0x0328)
class ABP_jRPG_GM_Bootstrap_C final : public ASandfallGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0328(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBP_GameFlowTransitionSystem_C*         BP_GameFlowTransitionSystem;                       // 0x0330(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0338(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWBP_SplashScreens_Logos_C*             SplashScreenWidget;                                // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void OnSaveWarningSplashScreenCompleted();
	void OnLogoSplashScreensCompleted();
	void OnLoaded_D6D2622E42B8126484ED9C9767F887D9(TSubclassOf<class UObject> Loaded);
	void OnLoaded_CDBF061942C23FFCB5EF2893CAB33E34(class UObject* Loaded);
	void OnEpilepsyWarningCompleted();
	void OnBenchmarkRunCompleted_979B286E45CAF25A8F4AE9B9D6ED9B15();
	void On_GameStartActivity();
	void LoadMainMenuLevel();
	void ExecuteUbergraph_BP_jRPG_GM_Bootstrap(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_jRPG_GM_Bootstrap_C">();
	}
	static class ABP_jRPG_GM_Bootstrap_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_jRPG_GM_Bootstrap_C>();
	}
};
static_assert(alignof(ABP_jRPG_GM_Bootstrap_C) == 0x000008, "Wrong alignment on ABP_jRPG_GM_Bootstrap_C");
static_assert(sizeof(ABP_jRPG_GM_Bootstrap_C) == 0x000348, "Wrong size on ABP_jRPG_GM_Bootstrap_C");
static_assert(offsetof(ABP_jRPG_GM_Bootstrap_C, UberGraphFrame) == 0x000328, "Member 'ABP_jRPG_GM_Bootstrap_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_GM_Bootstrap_C, BP_GameFlowTransitionSystem) == 0x000330, "Member 'ABP_jRPG_GM_Bootstrap_C::BP_GameFlowTransitionSystem' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_GM_Bootstrap_C, DefaultSceneRoot) == 0x000338, "Member 'ABP_jRPG_GM_Bootstrap_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_jRPG_GM_Bootstrap_C, SplashScreenWidget) == 0x000340, "Member 'ABP_jRPG_GM_Bootstrap_C::SplashScreenWidget' has a wrong offset!");

}

