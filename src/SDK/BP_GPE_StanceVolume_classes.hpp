#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GPE_StanceVolume

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "ALS_Stance_structs.hpp"
#include "E_jRPG_CharacterWorldCapability_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GPE_StanceVolume.BP_GPE_StanceVolume_C
// 0x0028 (0x02B8 - 0x0290)
class ABP_GPE_StanceVolume_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UNavModifierComponent*                  NavModifier;                                       // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	EALS_Stance                                   ForcedStance;                                      // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void BndEvt__BP_GPE_StanceVolume_Box_K2Node_ComponentBoundEvent_1_ComponentEndOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void ChangeStanceForALSBaseCharacter(class AALSBaseCharacter* Character, bool Enable);
	void ChangeStanceForCharacterWorld(class ABP_jRPG_Character_World_C* CharacterWorld, bool Enable);
	void ExecuteUbergraph_BP_GPE_StanceVolume(int32 EntryPoint);
	void SetALSCharacterToCrouching(class AALSBaseCharacter* Character, bool Enable);
	void SetALSCharacterToStanding(class AALSBaseCharacter* Character, bool Enable);
	void SetCharacterWorldToStanceCrouching(class ABP_jRPG_Character_World_C* CharacterWorld, bool Enable);
	void SetCharacterWorldToStanceStanding(class ABP_jRPG_Character_World_C* CharacterWorld, bool Enable);
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GPE_StanceVolume_C">();
	}
	static class ABP_GPE_StanceVolume_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_GPE_StanceVolume_C>();
	}
};
static_assert(alignof(ABP_GPE_StanceVolume_C) == 0x000008, "Wrong alignment on ABP_GPE_StanceVolume_C");
static_assert(sizeof(ABP_GPE_StanceVolume_C) == 0x0002B8, "Wrong size on ABP_GPE_StanceVolume_C");
static_assert(offsetof(ABP_GPE_StanceVolume_C, UberGraphFrame) == 0x000290, "Member 'ABP_GPE_StanceVolume_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_GPE_StanceVolume_C, NavModifier) == 0x000298, "Member 'ABP_GPE_StanceVolume_C::NavModifier' has a wrong offset!");
static_assert(offsetof(ABP_GPE_StanceVolume_C, Box) == 0x0002A0, "Member 'ABP_GPE_StanceVolume_C::Box' has a wrong offset!");
static_assert(offsetof(ABP_GPE_StanceVolume_C, DefaultSceneRoot) == 0x0002A8, "Member 'ABP_GPE_StanceVolume_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_GPE_StanceVolume_C, ForcedStance) == 0x0002B0, "Member 'ABP_GPE_StanceVolume_C::ForcedStance' has a wrong offset!");

}

